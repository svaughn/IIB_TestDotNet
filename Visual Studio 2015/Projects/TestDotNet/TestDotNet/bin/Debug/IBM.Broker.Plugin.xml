<?xml version="1.0"?>
<doc>
    <assembly>
        IBM.Broker.Plugin
    </assembly>
    <members>
        <member name="M:IBM.Broker.Plugin.NBLog.LogUserTrace(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Logs an entry from the specified catalog with the given message number and severity to the user trace log with the provided inserts.
</summary>
            <param name="catalog">The message catalog.</param>
            <param name="number">The message number.</param>
            <param name="severity">The message severity.</param>
            <param name="inserts">The message inserts.</param>
            <remarks>
This method always writes to the user trace log, irrespective of the current trace level.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBLog.LogUserTrace(System.String,System.Int64,System.Object[])">
            <summary>
Logs an entry from the specified catalog with the given message number to the user trace log with the provided inserts.
</summary>
            <param name="catalog">The message catalog.</param>
            <param name="number">The message number.</param>
            <param name="inserts">The message inserts.</param>
            <remarks>
This method always writes to the user trace log, irrespective of the current trace level.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBLog.LogUserTrace(System.String,System.Int64)">
            <summary>
Logs an entry from the specified catalog with the given message number to the user trace log.
</summary>
            <param name="catalog">The message catalog.</param>
            <param name="number">The message number.</param>
            <remarks>
This method always writes to the user trace log, irrespective of the current trace level.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBLog.LogUserTrace(System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Logs an entry with the specified message number and severity to the user trace log with the given inserts.
</summary>
            <param name="number">The message number.</param>
            <param name="severity">The message severity.</param>
            <param name="inserts">The message inserts.</param>
            <remarks>
This method always writes to the user trace log, irrespective of the current trace level.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBLog.LogUserTrace(System.Int64,System.Object[])">
            <summary>
Logs an entry with the specified message number to the user trace log with the given inserts.
</summary>
            <param name="number">The message number.</param>
            <param name="inserts">The message inserts.</param>
            <remarks>
This method always writes to the user trace log, irrespective of the current trace level.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBLog.LogUserTrace(System.Int64,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Logs an entry with the specified message number and severity to the user trace log.
</summary>
            <param name="number">The message number.</param>
            <param name="severity">The message severity.</param>
            <remarks>
This method always writes to the user trace log, irrespective of the current trace level.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBLog.LogUserTrace(System.Int64)">
            <summary>
Logs an entry with the specified message number to the user trace log.
</summary>
            <param name="number">The message number.</param>
            <remarks>
This method always writes to the user trace log, irrespective of the current trace level.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBLog.LogEvent(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Logs an event from the specified catalog with the given message number and severity to the Event Log with the provided inserts.
</summary>
            <param name="catalog">The message catalog.</param>
            <param name="number">The message number.</param>
            <param name="severity">The message severity.</param>
            <param name="inserts">The message inserts.</param>
            <remarks>
This method always writes to the Event Log, irrespective of the current trace level.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBLog.LogEvent(System.String,System.Int64,System.Object[])">
            <summary>
Logs an event from the specified catalog with the given message number to the Event Log with the provided inserts.
</summary>
            <param name="catalog">The message catalog.</param>
            <param name="number">The message number.</param>
            <param name="inserts">The message inserts.</param>
            <remarks>
This method always writes to the Event Log, irrespective of the current trace level.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBLog.LogEvent(System.String,System.Int64)">
            <summary>
Logs an event from the specified catalog with the given message number to the Event Log.
</summary>
            <param name="catalog">The message catalog.</param>
            <param name="number">The message number.</param>
            <remarks>
This method always writes to the Event Log, irrespective of the current trace level.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBLog.LogEvent(System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Logs an event with the specified message number and severity to the Event Log with the given inserts.
</summary>
            <param name="number">The message number.</param>
            <param name="severity">The message severity.</param>
            <param name="inserts">The message inserts.</param>
            <remarks>
This method always writes to the Event Log, irrespective of the current trace level.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBLog.LogEvent(System.Int64,System.Object[])">
            <summary>
Logs an event with the specified message number to the Event Log with the given inserts.
</summary>
            <param name="number">The message number.</param>
            <param name="inserts">The message inserts.</param>
            <remarks>
This method always writes to the Event Log, irrespective of the current trace level.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBLog.LogEvent(System.Int64,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Logs an event with the specified message number and severity to the Event Log.
</summary>
            <param name="number">The message number.</param>
            <param name="severity">The message severity.</param>
            <remarks>
This method always writes to the Event Log, irrespective of the current trace level.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBLog.LogEvent(System.Int64)">
            <summary>
Logs an event with the specified message number to the Event Log.
</summary>
            <param name="number">The message number.</param>
            <remarks>
This method always writes to the Event Log, irrespective of the current trace level.
</remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.NBLog.UserTraceActive">
            <summary>
Returns true if user tracing has been turned on.
</summary>
            <value>UserTraceActive returns true if user tracing is on.</value>
        </member>
        <member name="T:IBM.Broker.Plugin.NBLog">
            <summary>
NBLog represents logging functions and allows messages to be written to user trace and to the Event Log.
</summary>
        </member>
        <member name="P:IBM.Broker.Plugin.NBTerminal.Attached">
            <summary>
Gets whether the terminal is attached to anything or not.
</summary>
            <value>Returns a boolean indicating the attached status.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBTerminal.Dynamic">
            <summary>
Returns true if the terminal is dynamic. A dynamic terminal is a terminal that was
added to a node by a messageflow designer rather than being a static attribute
which was added to the node when it was written.
</summary>
            <value>Returns true if terminal is dynamic, false otherwise.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.NBTerminal.Equals(IBM.Broker.Plugin.NBTerminal)">
            <summary>
Returns true if the two NBTerminal object references refer to the same terminal.
</summary>
            <param name="terminal">The terminal string.</param>
            <returns>True if this terminal is the same as the terminal argument, false otherwise.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBTerminal.ToString">
            <summary>
Returns a String representation of the terminal. 
</summary>
            <returns>The String representation of the terminal.</returns>
        </member>
        <member name="P:IBM.Broker.Plugin.NBTerminal.Name">
            <summary>
Gets the name of the terminal.
</summary>
            <value>The name of the terminal is accessed</value>
        </member>
        <member name="T:IBM.Broker.Plugin.NBTerminal">
            <summary>
NBTerminal represents base class functionality for output terminals.
</summary>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBByteArrayInputEvent.Offset">
            <summary>
Returns the offset passed in on the constructor, or the Length of the byte array if the two argument constructor was used.
</summary>
            <value>The provided offset or the Length of the byte array.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBByteArrayInputEvent.GetBytes">
            <summary>
Returns the data associated with this result.
</summary>
            <returns>The byte array passed in on the constructor.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBByteArrayInputEvent.BuildInputRecord">
            <summary>
Provides a default implementation of BuildInputRecord.
</summary>
            <remarks>
If not overridden, a new NBByteArrayInputRecord is returned, populated from the given data.
</remarks>
            <returns>A new NBInputRecord.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBByteArrayInputEvent.#ctor(IBM.Broker.Plugin.Connector.NBEventInputConnector,System.Byte[],System.Int64)">
            <summary>
Provides a default implementation.
</summary>
            <remarks>
A range from from <c>data</c> between 0 and offset will be used.
</remarks>
            <param name="connector">The owning connector.</param>
            <param name="data">The data to be passed to the flow.</param>
            <param name="offset">The offset into data.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if offset is negative or greater than the Length of <c>data</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBByteArrayInputEvent.#ctor(IBM.Broker.Plugin.Connector.NBEventInputConnector,System.Byte[])">
            <summary>
Provides a default implementation.
</summary>
            <param name="connector">The owning connector.</param>
            <param name="data">The data to be passed to the flow.</param>
        </member>
        <member name="T:IBM.Broker.Plugin.Connector.NBByteArrayInputEvent">
            <summary>
NBByteArrayInputEvent provides a default class to handle byte array based events.
</summary>
            <remarks>
This class provides default handling of byte array events. You need only override methods where the default behaviour needs changing.
</remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.NBMessageFlow.CoordinatedTransaction">
            <summary>
Returns true if the current flow is configured for coordinated transactions.
</summary>
            <value>CoordinatedTransaction returns true if the message flow is configured for coordinated transactions.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBMessageFlow.AdditionalInstances">
            <summary>
Returns the number of the additional instances configured for the current flow.
</summary>
            <value>AdditionalInstances returns the number of the additional instances for the current flow.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBMessageFlow.CommitInterval">
            <summary>
Returns the CommitInterval configured for the current flow.
</summary>
            <value>CommitCount returns the Commit Interval for the current flow.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBMessageFlow.CommitCount">
            <summary>
Returns the CommitCount configured for the current flow.
</summary>
            <value>CommitCount returns the Commit Count for the current flow.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBMessageFlow.LibraryName">
            <summary>
Returns the name of the library the message flow belongs to.
</summary>
            <value>LibraryName returns the name of the library the message flow belongs to.</value>
            <remarks>
An empty string will be returned if the flow does not belong to a library.
</remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.NBMessageFlow.ApplicationName">
            <summary>
Returns the name of the application the message flow belongs to.
</summary>
            <value>ApplicationName returns the name of the application the message flow belongs to.</value>
            <remarks>
An empty string will be returned if the flow does not belong to an application.
</remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.NBMessageFlow.Name">
            <summary>
Returns the name of the message flow.
</summary>
            <value>Name returns the Message flow name.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBMessageFlow.InstanceStopping">
            <summary>
Returns if the current processing thread has been asked to stop.
</summary>
            <value>InstanceStopping returns a <c>bool</c> with a value of true if the current work thread is stopping.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBMessageFlow.MessageFlow">
            <summary>
Returns an NBMessageFlow.
</summary>
            <value>MessageFlow returns an <c>NBMessageFlow</c> which represents the current message flow.</value>
        </member>
        <member name="T:IBM.Broker.Plugin.NBMessageFlow">
            <summary>
NBMessageFlow provides access to properties of the current message flow.
</summary>
            <remarks>
An instance of this class is returned by the <see cref="T:IBM.Broker.Plugin.NBMessageFlow" /> property.
</remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.NBMessageAssembly.ExceptionList">
            <summary>
Returns the <c>ExceptionList</c> from the assembly.
</summary>
            <value>ExceptionList returns the exception list from the assembly.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBMessageAssembly.Environment">
            <summary>
Returns the <c>Environment</c> from the assembly.
</summary>
            <value>Environment returns the global environment tree from the assembly.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBMessageAssembly.LocalEnvironment">
            <summary>
Returns the <c>LocalEnvironment</c> from the assembly.
</summary>
            <value>LocalEnvironment returns the local environment tree from the assembly.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBMessageAssembly.Message">
            <summary>
Returns the <c>Message</c> from the assembly.
</summary>
            <value>Message returns the message tree from the assembly.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageAssembly.#ctor(IBM.Broker.Plugin.NBMessageAssembly,IBM.Broker.Plugin.NBMessage,IBM.Broker.Plugin.NBMessage,IBM.Broker.Plugin.NBMessage)">
            <summary>
Creates an <c>NBMessageAssembly</c> based upon the <c>sourceAssembly</c> passed in by adding 
in the <c>sourceMessage</c>, <c>sourceLocalEnvironment</c> and <c>sourceExceptionList</c>.
</summary>
            <param name="sourceAssembly">The <c>sourceAssembly</c> upon which the new assembly is based.</param>
            <param name="sourceMessage">The <c>sourceMessage</c> to be added to the new assembly.</param>
            <param name="sourceLocalEnvironment">The <c>sourceLocalEnvironment</c> to be added to the new assembly.</param>
            <param name="sourceExceptionList">The <c>sourceExceptionList</c> to be added to the new assembly.</param>
            <remarks>
The new assembly will contain the <c>environment</c> from the <c>sourceAssembly</c></remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageAssembly.#ctor(IBM.Broker.Plugin.NBMessageAssembly,IBM.Broker.Plugin.NBMessage,IBM.Broker.Plugin.NBMessage)">
            <summary>
Creates an <c>NBMessageAssembly</c> based upon the <c>sourceAssembly</c> passed in by adding 
in the <c>sourceMessage</c> and <c>sourceLocalEnvironment</c></summary>
            <param name="sourceAssembly">The <c>sourceAssembly</c> upon which the new assembly is based.</param>
            <param name="sourceMessage">The <c>sourceMessage</c> to be added to the new assembly.</param>
            <param name="sourceLocalEnvironment">The <c>sourceLocalEnvironment</c> to be added to the new assembly.</param>
            <remarks>
The new assembly will contain the <c>environment</c> and <c>exceptionList</c> from the <c>sourceAssembly</c></remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageAssembly.#ctor(IBM.Broker.Plugin.NBMessageAssembly,IBM.Broker.Plugin.NBMessage)">
            <summary>
Creates an <c>NBMessageAssembly</c> based upon the <c>sourceAssembly</c> passed in by adding in the <c>sourceMessage</c>.
</summary>
            <param name="sourceAssembly">The <c>sourceAssembly</c> upon which the new assembly is based.</param>
            <param name="sourceMessage">The <c>sourceMessage</c> to be added to the new assembly.</param>
            <remarks>
The new assembly will contain the <c>localEnvironment</c>, <c>environment</c> and <c>exceptionList</c> from the <c>sourceAssembly</c></remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBMessageAssembly">
            <summary>
                <c>NBMessageAssembly</c> is the top level structure used to pass messages between
nodes. As well as the message itself, it also contains the exception list 
and the local and global environments all represented by <see cref="T:IBM.Broker.Plugin.NBMessage" /> objects.
</summary>
            <remarks>
                <b>Warning:</b> caching <c>NBMessageAssembly</c> objects over multiple message flow invocations is unsupported 
because the internal state will be reset at the end of each message flow invocation.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBMessageControl">
            <summary>
NBMessageControl defines the options for finalization of an NBMessage when it is propagated. 
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBMessageControl.FinalizeNone">
            <summary>
FinalizeNone stops the finalization process from occuring when a message is propagated.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBMessageControl.FinalizeDefault">
            <summary>
FinalizeDefault causes the finalization process to occur when a message is propagated.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRoute.ToString">
            <summary>
Returns a String representation of NBRoute.
</summary>
            <returns>The String representation of the NBRoute.</returns>
        </member>
        <member name="P:IBM.Broker.Plugin.NBRoute.Name">
            <summary>
Gets the name of the label node this NBRoute points to.
</summary>
            <value>Name accesses the label's name.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRoute.Propagate(IBM.Broker.Plugin.NBMessageAssembly,IBM.Broker.Plugin.NBMessageControl)">
            <summary>
Propagates an <see cref="T:IBM.Broker.Plugin.NBMessageAssembly" /> to the label with the options specified.
</summary>
            <param name="assembly">The NBMessageAssembly being propagated.</param>
            <param name="options">The options controlling finalization of the propagated message.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRoute.Propagate(IBM.Broker.Plugin.NBMessageAssembly)">
            <summary>
Propagates an <see cref="T:IBM.Broker.Plugin.NBMessageAssembly" /> to the label.
</summary>
            <param name="assembly">The NBMessageAssembly being propagated.</param>
        </member>
        <member name="T:IBM.Broker.Plugin.NBRoute">
            <summary>
NBRoute represents a Label node to which a message can be propagated. 
A node can propagate a message to any label node in the same message flow as itself. 
</summary>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBElementInputRecord.Element">
            <summary>
Call this method to get the root element for this record.
</summary>
            <remarks>
Use the root element to build the message tree for this record.
</remarks>
            <value>The root element of the message tree for this record.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBElementInputRecord.#ctor(IBM.Broker.Plugin.Connector.NBInputConnector)">
            <summary>
Initializes a new instance of the <see cref="T:IBM.Broker.Plugin.Connector.NBElementInputRecord" /> class.
</summary>
            <param name="connector">The owning connector.</param>
        </member>
        <member name="T:IBM.Broker.Plugin.Connector.NBElementInputRecord">
            <summary>
NBElementInputRecord provides a default class to handle input records for polling results and events.
</summary>
            <remarks>
                <para>
Use an NBElementInputRecord when you want to have complete control over the message that is constructed or you are
building the message tree from a data source that does not have a bitstream representation.
</para>
                <para>
This class provides default handling of byte array records. You need only override methods where the default behaviour needs changing.
</para>
                <para>
A record represents a single message to be sent down a message flow.
</para>
            </remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessage.FinalizeMessage">
            <summary>
Performs finalizing processing on the message.
</summary>
            <remarks>
                <para>
Causes the broker to request parsers that support the finalize feature to perform their finalize processing on the message. 
The behavior of this processing is specific to each parser. 
</para>
                <para>
Bye default finalization happens automatically when a message is propagated.
</para>
                <para>
Note this is the Integration Bus finalization process, not .NET Garbase Collection (GC) finalization.
</para>
            </remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessage.GetBuffer">
            <summary>
Gets a copy of the data buffer associated with (and owned by) the message object.        
</summary>
            <returns>The data buffer associated with the message object.</returns>
            <remarks>
Causes the NBElement tree associated with the message to be written to the data buffer owned by that message object. 
This operation serializes the element tree into a bit stream, which is then returned as a sequence of contiguous bytes. 
This method should be used when writing the bitstream to a target that is outside the broker.
(that is, when writing a user-defined output node). 
</remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.NBMessage.ReadOnly">
            <summary>
Returns true if the message is read only.
</summary>
            <value>ReadOnly returns true if the message is should not be modified.</value>
            <remarks>
An exception is thrown if a read only message is modified.
</remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.NBMessage.RootElement">
            <summary>
Returns the RootNBElement of the message.
</summary>
            <value>RootElement creates an NBElement, representing the current Root Element.</value>
            <remarks>
When a message object is constructed by the broker, a root element is automatically created.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessage.Dispose">
            <summary>
Deletes the resources associated with the message.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessage.#ctor(IBM.Broker.Plugin.NBMessage)">
            <summary>
A copy constructor for an NBMessage. An new NBMessage is constructed based on a deep copy of the existing message passed in.
</summary>
            <param name="message">Existing message.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessage.#ctor">
            <summary>
The default constructor for an NBMessage.
</summary>
            <remarks>
When a message object is constructed by the broker, a root element is automatically created.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBMessage">
            <summary>
NBMessage represents the message passed between the nodes in a message flow.
A message in its raw form is a sequence of bytes known as the <i>wire format</i>.
</summary>
            <remarks>
Nodes within the broker will navigate and manipulate the message using
a logical format whereby the message is represented as a hierarchical tree
of <i>NBElements</i>.
<para>
Conversion between these two formats is managed
by parsers. Different parsers are invoked by the root parser as required
during the parsing of a message. The following diagram shows a typical
message.
</para><para /><pre>

                  +------+
                  | Root |
                  +------+
                 /        
                /          \ 
               /            \  
              /              \   
             /                \    
    +----------+    +----+    +------+
    |Properties|----|MQMD|----|XMLNSC|
    +----------+    +----+    +------+

</pre><para /><para>
The root parser at the top will invoke the parsers along the bottom in the
order shown to parse the bit stream into a tree. This tree
will then have same structure as shown in the diagram with sub-trees off
each parser element representing its part of the message. For example the
MQMD header is the first sibling of the first child of Root and the MQMD
fields are children of this.
</para><para>
The element representing the root is returned by the property
<see cref="P:IBM.Broker.Plugin.NBMessage.RootElement" />. This is an object of type
<see cref="T:IBM.Broker.Plugin.NBElement" /> which contains methods to navigate
and modify the tree.
</para><para>
Also, see the topic "Working with Messages. Appendix A: Message Parsers - element definitions" in the Information Center.
</para><para><b>Warning:</b> caching <c>NBMessage</c> objects over multiple message flow invocations is unsupported because the 
internal state may be reset at the end of each message flow invocation.
</para></remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUtilities.ChangeIdentifierTimeout(System.Byte[],System.Int32)">
            <summary>
Changes the timeout for a given identifier used by the SOAP or HTTP nodes.
</summary>
            <param name="identifier">This is a byte array that must resolve to a valid SOAP node ReplyIdentifier or HTTP node RequestIdentifier.</param>
            <param name="timeout">This is the time in seconds to be added to the existing timeout. </param>
            <returns>Indicating if the timeout was sucessfully changed</returns>
        </member>
        <member name="T:IBM.Broker.Plugin.NBUtilities">
            <summary>
NBUtilities represents static broker utility methods.
</summary>
        </member>
        <member name="P:IBM.Broker.Plugin.NBOutputTerminal.Attached">
            <summary>
Indicates whether the terminal is attached to anything or not. 
</summary>
            <value>A boolean indicating the attached status.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.NBOutputTerminal.ToString">
            <summary>
Returns a String representation of the NBOutputTerminal. 
</summary>
            <returns>A String representation of the NBOutputTerminal.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBOutputTerminal.Propagate(IBM.Broker.Plugin.NBMessageAssembly,IBM.Broker.Plugin.NBMessageControl)">
            <summary>
Propagates an <see cref="T:IBM.Broker.Plugin.NBMessageAssembly" /> to the terminal with the specified options.
</summary>
            <param name="assembly">The NBMessageAssembly being propagated.</param>
            <param name="options">The options controlling finalization of the propagated message.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBOutputTerminal.Propagate(IBM.Broker.Plugin.NBMessageAssembly)">
            <summary>
Propagates an <see cref="T:IBM.Broker.Plugin.NBMessageAssembly" /> to the terminal.
</summary>
            <param name="assembly">The NBMessageAssembly being propagated.</param>
        </member>
        <member name="T:IBM.Broker.Plugin.NBOutputTerminal">
            <summary>
NBOutputTerminal represents a terminal to which a message is propagated
out of the <b>.NETComputeNode</b>.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableBoolean(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;Boolean&gt;</c> if required.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;Boolean&gt;</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;Boolean&gt;</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToBoolean(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Boolean</c> if required.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>Boolean</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Boolean</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableDateTimeOffset(IBM.Broker.Plugin.NBElement,System.String,IBM.Broker.Plugin.NBElementDateTimeType)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;DateTimeOffset&gt;</c> if required using specified format and conversion.
</summary>
            <remarks>
                <para>
As there are multiple choices when converting from a broker type to a <c>Nullable&lt;DateTimeOffset&gt;</c>, this method allows you greater control over
how the convertion is performed. The <c>value</c> is first converted to the <c>convertVia</c> type, and then 
subsequently converted to a <c>Nullable&lt;DateTimeOffset&gt;</c>.
</para>
                <para>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing dateTimes as strings (ak05616)".
</para>
            </remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The format specifier for the convertion.</param>
            <param name="convertVia">The type conversion qualifier for element.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;DateTimeOffset&gt;</c> data type using the specified format and conversion.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;DateTimeOffset&gt;</c> with specified format and conversion.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableDateTimeOffset(IBM.Broker.Plugin.NBElement,IBM.Broker.Plugin.NBElementDateTimeType)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;DateTimeOffset&gt;</c> if required using specified conversion.
</summary>
            <remarks>
                <para>
As there are multiple choices when converting from a broker type to a <c>Nullable&lt;DateTimeOffset&gt;</c>, this method allows you greater control over
how the convertion is performed. The <c>value</c> is first converted to the <c>convertVia</c> type, and then 
subsequently converted to a <c>Nullable&lt;DateTimeOffset&gt;</c>.
</para>
            </remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="convertVia">The type conversion qualifier for element.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;DateTimeOffset&gt;</c> data type and the specified conversion of the element.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;DateTimeOffset&gt;</c> using specified conversion.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableDateTimeOffset(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;DateTimeOffset&gt;</c>.
</summary>
            <remarks>
This method assumes the value element will contain a broker <c>Date</c>, <c>Timestamp</c> or <c>GmtTimestamp</c> data type.
If this is not the case, use one of the overloads with the <c>convertVia</c> parameter.
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;DateTimeOffset&gt;</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;DateTimeOffset&gt;</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableTimeSpan(IBM.Broker.Plugin.NBElement,System.String,IBM.Broker.Plugin.NBElementTimeSpanType)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;TimeSpan&gt;</c> if required using specified format and conversion.
</summary>
            <remarks>
                <para>
As there are multiple choices when converting from a broker type to a <c>Nullable&lt;TimeSpan&gt;</c>, this method allows you greater control over
how the convertion is performed. The <c>value</c> is first converted to the <c>convertVia</c> type, and then 
subsequently converted to a <c>Nullable&lt;TimeSpan&gt;</c>.
</para>
                <para>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing dateTimes as strings (ak05616)".
</para>
            </remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The element whose value is to be converted.</param>
            <param name="convertVia">The type conversion qualifier for element.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;TimeSpan&gt;</c> data type using the specified format and with the specified conversion of the element.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;TimeSpan&gt;</c> with the given format and conversion.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableTimeSpan(IBM.Broker.Plugin.NBElement,IBM.Broker.Plugin.NBElementTimeSpanType)">
            <summary>
Returns the value of the NBElement passed in as a <c>Nullable&lt;TimeSpan&gt;</c> after first converting it to the <c>convertVia</c> type.
</summary>
            <remarks>
As there are multiple choices when converting from a broker type to a <c>Nullable&lt;TimeSpan&gt;</c>, this method allows you greater control over
how the convertion is performed. The <c>value</c> is first converted to the <c>convertVia</c> type, and then 
subsequently converted to a <c>Nullable&lt;TimeSpan&gt;</c>.
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="convertVia">The type the value is first converted to.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;TimeSpan&gt;</c> data type using the specified conversion of the element.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;TimeSpan&gt;</c> with the given conversion.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableTimeSpan(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;TimeSpan&gt;</c>.
</summary>
            <remarks>
This method assumes the value element will contain a broker <c>Time</c>, <c>GmtTime</c> or <c>IntervalDaySecond</c> data type.
If this is not the case, use one of the overloads with the <c>convertVia</c> parameter.
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;TimeSpan&gt;</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;TimeSpan&gt;</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableDateTime(IBM.Broker.Plugin.NBElement,System.String)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;DateTime&gt;</c> if required using specified format.
</summary>
            <remarks>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing dateTimes as strings (ak05616)".
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The format specifier for the convertion.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;DateTime&gt;</c> data type using the specified format.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;DateTime&gt;</c> with the given format.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableDateTime(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;DateTime&gt;</c> if required.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;DateTime&gt;</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;DateTime&gt;</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToDateTimeOffset(IBM.Broker.Plugin.NBElement,System.String,IBM.Broker.Plugin.NBElementDateTimeType)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>DateTimeOffset</c> if required using specified format and conversion.
</summary>
            <remarks>
                <para>
As there are multiple choices when converting from a broker type to a <c>DateTimeOffset</c>, this method allows you greater control over
how the convertion is performed. The <c>value</c> is first converted to the <c>convertVia</c> type, and then 
subsequently converted to a <c>DateTimeOffset</c>.
</para>
                <para>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing dateTimes as strings (ak05616)".
</para>
            </remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The format specifier for the convertion.</param>
            <param name="convertVia">The type conversion qualifier for element.</param>
            <returns>The current element's value converted to a <c>DateTimeOffset</c> data type using the specified format and conversion.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>DateTimeOffset</c> with specified format and conversion.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToDateTimeOffset(IBM.Broker.Plugin.NBElement,IBM.Broker.Plugin.NBElementDateTimeType)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>DateTimeOffset</c> if required using specified conversion.
</summary>
            <remarks>
                <para>
As there are multiple choices when converting from a broker type to a <c>DateTimeOffset</c>, this method allows you greater control over
how the convertion is performed. The <c>value</c> is first converted to the <c>convertVia</c> type, and then 
subsequently converted to a <c>DateTimeOffset</c>.
</para>
            </remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="convertVia">The type conversion qualifier for element.</param>
            <returns>The current element's value converted to a <c>DateTimeOffset</c> data type and the specified conversion of the element.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>DateTimeOffset</c> using specified conversion.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToDateTimeOffset(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>DateTimeOffset</c>.
</summary>
            <remarks>
This method assumes the value element will contain a broker <c>Date</c>, <c>Timestamp</c> or <c>GmtTimestamp</c> data type.
If this is not the case, use one of the overloads with the <c>convertVia</c> parameter.
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>DateTimeOffset</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>DateTimeOffset</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToTimeSpan(IBM.Broker.Plugin.NBElement,System.String,IBM.Broker.Plugin.NBElementTimeSpanType)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>TimeSpan</c> if required using specified format and conversion.
</summary>
            <remarks>
                <para>
As there are multiple choices when converting from a broker type to a <c>TimeSpan</c>, this method allows you greater control over
how the convertion is performed. The <c>value</c> is first converted to the <c>convertVia</c> type, and then 
subsequently converted to a <c>TimeSpan</c>.
</para>
                <para>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing dateTimes as strings (ak05616)".
</para>
            </remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The element whose value is to be converted.</param>
            <param name="convertVia">The type conversion qualifier for element.</param>
            <returns>The current element's value converted to a <c>TimeSpan</c> data type using the specified format and with the specified conversion of the element.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>TimeSpan</c> with the given format and conversion.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToTimeSpan(IBM.Broker.Plugin.NBElement,IBM.Broker.Plugin.NBElementTimeSpanType)">
            <summary>
Returns the value of the NBElement passed in as a <c>TimeSpan</c> after first converting it to the <c>convertVia</c> type.
</summary>
            <remarks>
As there are multiple choices when converting from a broker type to a <c>TimeSpan</c>, this method allows you greater control over
how the convertion is performed. The <c>value</c> is first converted to the <c>convertVia</c> type, and then 
subsequently converted to a <c>TimeSpan</c>.
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="convertVia">The type the value is first converted to.</param>
            <returns>The current element's value converted to a <c>TimeSpan</c> data type using the specified conversion of the element.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>TimeSpan</c> with the given conversion.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToTimeSpan(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>TimeSpan</c>.
</summary>
            <remarks>
This method assumes the value element will contain a broker <c>Time</c>, <c>GmtTime</c> or <c>IntervalDaySecond</c> data type.
If this is not the case, use one of the overloads with the <c>convertVia</c> parameter.
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>TimeSpan</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>TimeSpan</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToDateTime(IBM.Broker.Plugin.NBElement,System.String)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>DateTime</c> if required using specified format.
</summary>
            <remarks>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing dateTimes as strings (ak05616)".
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The format specifier for the convertion.</param>
            <returns>The current element's value converted to a <c>DateTime</c> data type using the specified format.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>DateTime</c> with the given format.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToDateTime(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>DateTime</c> if required.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>DateTime</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>DateTime</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToString(IBM.Broker.Plugin.NBElement,System.Int32,System.Int32)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>String</c> if required with the specified ccsid and encoding.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <param name="ccsid">The coded character set identifier of the element.</param>
            <param name="encoding">The encoding of the element.</param>
            <returns>The current element's value converted to a <c>String</c> data type  with coded character set identifier and encoding.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>String</c> with the given coded character set identifier and encoding.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToString(IBM.Broker.Plugin.NBElement,System.String)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>String</c> if required using specified format.
</summary>
            <remarks>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing numbers as strings (ak05615)".
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The format specifier for the convertion.</param>
            <returns>The current element's value converted to a <c>String</c> data type using the specified format.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>String</c> using specified format.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToString(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>String</c> if required.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>String</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>String</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToByteArray(IBM.Broker.Plugin.NBElement,System.Int32,System.Int32)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Byte Array</c> if required with the specified ccsid and encoding.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <param name="ccsid">The coded character set identifier of the element.</param>
            <param name="encoding">The encoding of the element.</param>
            <returns>The current element's value converted to a <c>Byte Array</c> data type  with coded character set identifier and encoding.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Byte Array</c> with the given coded character set identifier and encoding.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToByteArray(IBM.Broker.Plugin.NBElement,System.String)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Byte Array</c> if required with the specified format.
</summary>
            <remarks>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing numbers as strings (ak05615)".
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The format specifier for the convertion.</param>
            <returns>The current element's value converted to a <c>ByteArray</c> data type using the specified format.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>ByteArray</c> using specified format.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToByteArray(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Byte Array</c> if required.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>Byte Array</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Byte Array</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToBitArray(IBM.Broker.Plugin.NBElement,System.Int32,System.Int32)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Bit Array</c> if required with the specified ccsid and encoding.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <param name="ccsid">The coded character set identifier of the element.</param>
            <param name="encoding">The encoding of the element.</param>
            <returns>The current element's value converted to a <c>Bit Array</c> data type with coded character set identifier and encoding.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Bit Array</c> with the given coded character set identifier and encoding.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToBitArray(IBM.Broker.Plugin.NBElement,System.String)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Bit Array</c> if required with the specified format.
</summary>
            <remarks>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing numbers as strings (ak05615)".
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The format specifier for the convertion.</param>
            <returns>The current element's value converted to a <c>Bit Array</c> data type using the specified format.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Bit Array</c> with the given format.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToBitArray(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Bit Array</c> if required.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>Bit Array</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Bit Array</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableDouble(IBM.Broker.Plugin.NBElement,System.String)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;Double&gt;</c> if required with the specified format.
</summary>
            <remarks>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing numbers as strings (ak05615)".
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The format specifier for the convertion.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;Double&gt;</c> data type using the specified format.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;Double&gt;</c> with the given format.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableDouble(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;Double&gt;</c> if required.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>Nullable Double</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable Double</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableDecimal(IBM.Broker.Plugin.NBElement,System.Int32,System.Int32)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;Decimal&gt;</c> if required with the specified  precision and scale.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <param name="precision">The precision of the element.</param>
            <param name="scale">The scale of the element.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;Decimal&gt;</c> data type with specified precision and scale.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;Decimal&gt;</c> with specified precision and scale.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableDecimal(IBM.Broker.Plugin.NBElement,System.String)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;Decimal&gt;</c> if required with specified format.
</summary>
            <remarks>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing numbers as strings (ak05615)".
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The format specifier for the convertion.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;Decimal&gt;</c> data type using the specified format.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;Decimal&gt;</c> with the given format.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableDecimal(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;Decimal&gt;</c> if required.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;Decimal&gt;</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;Decimal&gt;</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableInt64(IBM.Broker.Plugin.NBElement,System.String)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;Int64&gt;</c> if required with specified format.
</summary>
            <remarks>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing numbers as strings (ak05615)".
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The format specifier for the convertion.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;Int64&gt;</c> data type using the specified format.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;Int64&gt;</c> with the given format.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableInt64(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;Int64&gt;</c> if required.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;Int64&gt;</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;Int64&gt;</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableInt32(IBM.Broker.Plugin.NBElement,System.String)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;Int32&gt;</c> if required with the specified format.
</summary>
            <remarks>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing numbers as strings (ak05615)".
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The format specifier for the convertion.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;Int32&gt;</c> data type using the specified format.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Nullable&lt;Int32&gt;</c> with the given format.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToNullableInt32(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Nullable&lt;Int32&gt;</c> if required.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>Nullable&lt;Int32&gt;</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a Nullable&lt;Int32&gt; element.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToDouble(IBM.Broker.Plugin.NBElement,System.String)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Double</c> if required using the specified format.
</summary>
            <remarks>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing numbers as strings (ak05615)".
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The format specifier for the convertion.</param>
            <returns>The current element's value converted to a <c>Double</c> data type using the specified format.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Double</c> with the given format.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToDouble(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Double</c> if required.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>Double</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Double</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToDecimal(IBM.Broker.Plugin.NBElement,System.Int32,System.Int32)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Decimal</c> if required using the specified precision and scale. 
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <param name="precision">The precision of the element.</param>
            <param name="scale">The scale of the element.</param>
            <returns>The current element's value converted to a <c>Decimal</c> data type using the specified precision and scale.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Decimal</c> with the given precision and scale.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToDecimal(IBM.Broker.Plugin.NBElement,System.String)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Decimal</c> if required.
</summary>
            <remarks>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing numbers as strings (ak05615)".
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The format specifier for the convertion.</param>
            <returns>The current element's value converted to a <c>Decimal</c> data type using the specified format.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Decimal</c> with the given format.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToDecimal(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Decimal</c> if required.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to a <c>Decimal</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Decimal</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToInt64(IBM.Broker.Plugin.NBElement,System.String)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Int64</c> if required using the specified format.
</summary>
            <remarks>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing numbers as strings (ak05615)".
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The format specifier for the convertion.</param>
            <returns>The current element's value converted to an <c>Int64</c> data type using the specified format.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to an <c>Int64</c> with the given format.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToInt64(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Int64</c> if required.
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value converted to an <c>Int64</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to an <c>Int64</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToInt32(IBM.Broker.Plugin.NBElement,System.String)">
            <summary>
Returns the value of the NBElement passed in after first converting it to a <c>Int32</c> if required using the specified format.
</summary>
            <remarks>
The format string uses the syntax documented in the Information Center in the topic "Formatting and parsing numbers as strings (ak05615)".
</remarks>
            <param name="value">The element whose value is to be converted.</param>
            <param name="format">The format specifier for the convertion.</param>
            <returns>The current element's value converted to a <c>Int32</c> data type using the specified format.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to an <c>Int32</c> with the given format.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElementConvert.ToInt32(IBM.Broker.Plugin.NBElement)">
            <summary>
Returns the value of the NBElement passed in after first converting it to an <c>Int32</c> if required. 
</summary>
            <param name="value">The element whose value is to be converted.</param>
            <returns>The current element's value as a <c>Int32</c> data type.</returns>
            <exception cref="T:System.FormatException">Thrown if the value can not be converted to a <c>Int32</c>.</exception>
        </member>
        <member name="T:IBM.Broker.Plugin.NBElementConvert">
            <summary>
NBElementConvert represents a series of static datatype convertion methods that act on <c>NBElement</c>s from the message trees. 
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCollectionMessage.CreateNameValue(System.String,System.Object)">
            <summary>
Creates a name-value element as the last child of the Collection element of the message collection.
</summary>
            <remarks>
The element will be named using the String passed as the name argument.
The value of the element will be the value argument to this method. 
</remarks>
            <param name="name">The name of the element to be created.</param>
            <param name="value">The value of the element to be created.</param>
            <returns>The created name value element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCollectionMessage.CreateFolder(System.String)">
            <summary>
Creates a folder element as the last child of the Collection element of the message collection.
</summary>
            <remarks>
The element will be named using the String passed as the folderName argument. 
A CollectionFolder parser will be associated with the created element
</remarks>
            <param name="folderName">The name of the folder to be created.</param>
            <returns>The created folder.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCollectionMessage.#ctor">
            <summary>
Default constructor for NBCollectionMessage.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBCollectionMessage">
            <summary>
NBCollectionMessage represents a message collection that can be passed between the nodes in a message flow.
A message collection is a specialisation of an <see cref="T:IBM.Broker.Plugin.NBMessage" />.
</summary>
            <remarks>
The last child of the root of the message is an element called "Collection" and has a Collection parser associated with it. 
The children of the Collection element are either name-value types that do not have an associated parser 
or are the root elements of Integration Bus message structures and will have an appropriate parser associated with them. 
In the case of structures created using this <c>NBCollectionMessage</c> class, the message roots are referred to as folders. 
The folders can be given any name you require and will be associated with a CollectionFolder parser. 
Typically, any name-value elements will preceed any folder element children of the Collection element. 
The following diagram illustrates the structure of a message collection.
<para /><pre>
              +------+
              | Root | (A)
              +--+---+
                 |
           +-----+------+
           | Collection | (A)
          +-----+------+
                 |
 +----------+----+-------+--------------+
 |          |            |              |
+--+--+    +--+--+    +----+----+    +----+----+
| nv1 |    | nv2 |    | folder1 |    | folder2 |
+-----+    +-----+    +----+----+    +----+----+
(B)        (B)       (C) |          (C) 
             +-----------+----------+                   
             |                      |    
       +-----+------+           +--------+
       | Properties |   - - -   | XMLNSC |
       +-----+------+    (D)    +---+----+
             |                      |
                                 +--+--+
                                 | msg |
                                 +--+--+
                                    |
</pre><para /><para>
The elements in the diagram marked (A), (B) and (C) are created by methods of the <c>NBCollectionMessage</c> class. 
Other elements, such as the children of the folder elements and their children in Properties and 
message body related children are created via their parent elements using the Create 
methods on the <see cref="T:IBM.Broker.Plugin.NBElement" /> class. See CreateLastChild as an example. There may be other header elements at (D) in the diagram. 
</para><para>
The elements marked (A) in the above diagram are created by the <c>NBCollectionMessage</c> constructor. 
</para><para>
The elements marked (B) are created using the CreateNameValue() method of the <c>NBCollectionMessage</c> class. 
</para><para>
The elements marked (C) are created using the CreateFolder() method of the <c>NBCollectionMessage</c> class. 
</para><para>
See Also: "Working with Messages. Appendix A: Message Parsers - element definitions" in the infocenter.
</para></remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.NBExecutionGroup.Uuid">
            <summary>
Returns the UUID for the Execution Group
</summary>
            <value>Uuid returns the Execution Group's UUID.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBExecutionGroup.Name">
            <summary>
Returns the Execution Group's name.
</summary>
            <value>Name returns the Execution Group name.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBExecutionGroup.ExecutionGroup">
            <summary>
Returns an <c>NBExecutionGroup</c>.
</summary>
            <value>ExecutionGroup returns an <c>NBExecutionGroup</c> which represents the current Execution Group.</value>
        </member>
        <member name="T:IBM.Broker.Plugin.NBExecutionGroup">
            <summary>
NBExecutionGroup provides access to properties of the current Execution Group.
</summary>
            <remarks>
An instance of this class is returned by the <see cref="P:IBM.Broker.Plugin.NBExecutionGroup.ExecutionGroup" /> property.
</remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.NBBroker.BrokerVersion">
            <summary>
BrokerVersion returns the broker's Version.
</summary>
            <value>BrokerVersion returns the broker's version.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBBroker.InstallationLocation">
            <summary>
InstallationLocation returns the broker's installation location.
</summary>
            <value>InstallationLocation returns the broker's installation location.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBBroker.WorkPath">
            <summary>
WorkPath returns the name of the broker's Work Path.
</summary>
            <value>WorkPath returns the name of the broker's Work Path.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBBroker.QueueManagerName">
            <summary>
Return the name of the broker's queue manager.
</summary>
            <value>QueueManagerName returns the name of the broker's queue manager.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBBroker.Name">
            <summary>
Returns the broker's name.
</summary>
            <value>Name returns the broker name.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBBroker.Broker">
            <summary>
Returns an <c>NBBroker</c>.
</summary>
            <value>Broker returns an <c>NBBroker</c> which represents the current broker.</value>
        </member>
        <member name="T:IBM.Broker.Plugin.NBBroker">
            <summary>
                <c>NBBroker</c> provides access to various broker wide properties.
</summary>
            <remarks>
An instance of this class is returned by the <see cref="P:IBM.Broker.Plugin.NBBroker.Broker" /> property.
</remarks>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.Properties.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.Properties">
            <summary>
This class represents constants for the Properties parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.SMQ_BMH.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.SMQ_BMH">
            <summary>
This class represents constants for the SMQ_BMH parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQWIH.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQWIH">
            <summary>
This class represents constants for the MQWIH parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQSAPH.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQSAPH">
            <summary>
This class represents constants for the MQSAPH parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQRMH.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQRMH">
            <summary>
This class represents constants for the MQRMH parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQRFH2C.SingleAttribute">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQRFH2C.Folder">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQRFH2C.Field">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQRFH2C.DoubleAttribute">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQRFH2C.BitStream">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQRFH2C.Attribute">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQRFH2C.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQRFH2C">
            <summary>
This class represents constants for the MQRFH2C compact parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQRFH2.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQRFH2">
            <summary>
This class represents constants for the RFH2 parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQRFH.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQRFH">
            <summary>
This class represents constants for the RFH parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQMDE.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQMDE">
            <summary>
This class represents constants for the MQMDE parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQMD.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQMD">
            <summary>
This class represents constants for the MQMD parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQIIH.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQIIH">
            <summary>
This class represents constants for the MQIIH parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQDLH.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQDLH">
            <summary>
This class represents constants for the MQDLH parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQCIH.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQCIH">
            <summary>
This class represents constants for the MQCIH parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQPCF.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.MQPCF">
            <summary>
This class represents constants for the MQPCF parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.JMSTransport.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.JMSTransport">
            <summary>
This class represents constants for the JMSTransport parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.HTTPResponseHeader.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.HTTPResponseHeader">
            <summary>
This class represents constants for the HTTPResponseHeader parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.HTTPRequestHeader.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.HTTPRequestHeader">
            <summary>
This class represents constants for the HTTPRequestHeader parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.HTTPReplyHeader.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.HTTPReplyHeader">
            <summary>
This class represents constants for the HTTPReplyHeader parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.HTTPInputHeader.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.HTTPInputHeader">
            <summary>
This class represents constants for the HTTPInputHeader parser. 
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.EmailOutputHeader.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers.EmailOutputHeader">
            <summary>
This class represents constants for the EmailOutputHeader parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.NBHeaderParsers">
            <summary>
This class represents constants for various header parsers.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.MIME.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.MIME">
            <summary>
This class represents constants for the MIME parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.JMSStream.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.JMSStream">
            <summary>
This class represents constants for the JMSStream parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.JMSMap.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.JMSMap">
            <summary>
This class represents constants for the JMSMap parser. 
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.DataObject.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.DataObject">
            <summary>
This class represents constants for the DataObject parser.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.MRM.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.MRM">
            <summary>
This class represents constants for the MRM parser. 
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.DFDL.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.DFDL">
            <summary>
This class represents constants for the DFDL parser. 
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.BLOB.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.BLOB">
            <summary>
This class represents constants for the BLOB parser. 
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.JSON.Object">
            <summary>
This is the specific type for a JSON object element.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.JSON.Array">
            <summary>
This is the specific type for a JSON array element.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.JSON.ObjectTypeName">
            <summary>
This is the specific type name for a JSON object element.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.JSON.ArrayTypeName">
            <summary>
This is the specific type name for a JSON array element.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.JSON.ArrayItemName">
            <summary>
This is the name of an array item element that is a child of an array element. 
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.JSON.PaddingElementName">
            <summary>
This is the name of the optional padding element that can be a child of the root. element.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.JSON.DataElementName">
            <summary>
This is the name of the data element that must be a child of the root element.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.JSON.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.JSON">
            <summary>
This class represents constants for the JSON parser. 
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.RequestedDomain">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.AttributeDefType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.DocTypePI">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.ElementDef">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.ProcessingInstruction">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.DocTypeWhiteSpace">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.AttributeDefDefaultType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.AttributeDefValue">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.EntityDeclarationValue">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.CDataSection">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.AsIsElementContent">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.DocTypeComment">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.EntityReferenceEnd">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.EntityReferenceStart">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.Comment">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.Standalone">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.Encoding">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.Version">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.NotationReference">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.SystemId">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.PublicId">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.WhiteSpace">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.ExternalParameterEntityDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.AttributeDef">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.AttributeList">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.ExternalSubset">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.InternalSubset">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.DocTypeDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.XmlDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.ExternalEntityDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.ParameterEntityDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.EntityDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.NotationDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.UnparsedEntityDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.Attribute">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.Content">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.ParserRoot">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.Element">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XML.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.XML">
            <summary>
This class represents constants for the XML parser. The integer constants
are the specific type values used by the logical tree to represent XML specific
constructs in the bitstream.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.RequestedDomain">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.AttributeDefType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.DocTypePI">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.ElementDef">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.ProcessingInstruction">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.DocTypeWhiteSpace">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.AttributeDefDefaultType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.AttributeDefValue">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.EntityDeclarationValue">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.CDataSection">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.AsIsElementContent">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.DocTypeComment">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.EntityReferenceEnd">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.EntityReferenceStart">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.Comment">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.Standalone">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.Encoding">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.Version">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.NotationReference">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.SystemId">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.PublicId">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.WhiteSpace">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.ExternalParameterEntityDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.AttributeDef">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.AttributeList">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.ExternalSubset">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.InternalSubset">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.DocTypeDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.XmlDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.ExternalEntityDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.ParameterEntityDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.EntityDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.NotationDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.UnparsedEntityDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.Attribute">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.Content">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.ParserRoot">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.Element">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.NamespaceDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNS.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.XMLNS">
            <summary>
This class represents constants for the XMLNS parser. The integer constants
are the specific type values used by the logical tree to represent XMLNS specific
constructs in the bitstream.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAPSchemaTypes.ListValueType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAPSchemaTypes.Base64BinaryType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAPSchemaTypes.GMonthDayType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAPSchemaTypes.GYearMonthType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAPSchemaTypes.GDayType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAPSchemaTypes.GMonthType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAPSchemaTypes.GYearType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.SOAPSchemaTypes">
            <summary>
This class represents constants for the SOAPSchemaTypes.
</summary>
            <remarks>
These constants can be OR'd with SOAP.PCDataValue, SOAP.DoubleAttribute, SOAP.SingleAttribute or SOAP.PCDataField to refine the data in the output bitstream
</remarks>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAP.AsIsElementContent">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAP.XmlDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAP.SingleNamespaceDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAP.SingleAttribute">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAP.PCDataValue">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAP.PCDataField">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAP.Folder">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAP.DoubleNamespaceDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAP.DoubleAttribute">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAP.DocumentType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAP.Comment">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAP.CDataValue">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAP.CDataField">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAP.BitStream">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.SOAP.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.SOAP">
            <summary>
This class contains constants for the SOAP parser. The integer constants
are the specific type values used by the logical tree to represent SOAP specific
constructs in the bitstream.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSCSchemaTypes.ListValueType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSCSchemaTypes.Base64BinaryType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSCSchemaTypes.GMonthDayType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSCSchemaTypes.GYearMonthType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSCSchemaTypes.GDayType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSCSchemaTypes.GMonthType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSCSchemaTypes.GYearType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.XMLNSCSchemaTypes">
            <summary>
The XMLNSCSchemaTypes class represents constants for the XMLNSCSchemaTypes.
</summary>
            <remarks>
These constants can be OR'd with XMLNSC.PCDataValue, XMLNSC.DoubleAttribute, XMLNSC.SingleAttribute or XMLNSC.PCDataField to refine the data in the output bitstream
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParsers.XMLNSC.CreateDoubleNamespaceDeclaration(IBM.Broker.Plugin.NBElement,System.String,System.String)">
            <summary>
The CreateDoubleNamespaceDeclaration method creates a double namespace declaration element from the specified target, prefix and space.
</summary>
            <param name="target" />
            <param name="prefix" />
            <param name="space" />
        </member>
        <member name="M:IBM.Broker.Plugin.NBParsers.XMLNSC.CreateSingleNamespaceDeclaration(IBM.Broker.Plugin.NBElement,System.String,System.String)">
            <summary>
The CreateSingleNamespaceDeclaration method creates a single namespace declaration element from the specified target, prefix and space.
</summary>
            <param name="target" />
            <param name="prefix" />
            <param name="space" />
        </member>
        <member name="M:IBM.Broker.Plugin.NBParsers.XMLNSC.CreateXmlDeclaration(IBM.Broker.Plugin.NBElement,System.String,System.String,System.String)">
            <summary>
The CreateXmlDeclaration method creates an XML declaration element from the specified target, version, encoding and standalone.
</summary>
            <param name="target" />
            <param name="version" />
            <param name="encoding" />
            <param name="standalone" />
        </member>
        <member name="M:IBM.Broker.Plugin.NBParsers.XMLNSC.CreateXmlDeclaration(IBM.Broker.Plugin.NBElement)">
            <summary>
The CreateXmlDeclaration method creates a default XML declaration element from the specified target.
</summary>
            <param name="target" />
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.AsIsElementContent">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.XmlDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.SingleNamespaceDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.SingleEntityDefinition">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.SingleAttribute">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.ProcessingInstruction">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.PCDataValue">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.PCDataField">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.Folder">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.EntityReference">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.DoubleNamespaceDeclaration">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.DoubleEntityDefinition">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.DoubleAttribute">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.DocumentType">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.Comment">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.CDataValue">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.CDataField">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.BitStream">
            <summary>
Parser constant.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBParsers.XMLNSC.ParserName">
            <summary>
The name of the parser.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers.XMLNSC">
            <summary>
This class represents constants for the XMLNSC compact parser. The integer constants
are the specific type values used by the logical tree to represent XMLNSC specific
constructs in the bitstream.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParsers">
            <summary>
Represents the built in message parsers that are available for use in broker.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBByteArrayInputRecord.AppendByteArray(System.Byte[],System.Int64)">
            <summary>
Call this method to append only <c>offset</c> bytes to the record.
</summary>
            <param name="data">The data to be appended to the record.</param>
            <param name="offset">The offset into <c>data</c>.</param>
            <remarks>
This method is called to pass the data from the event or result to the record.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBByteArrayInputRecord.AppendByteArray(System.Byte[])">
            <summary>
Call this method to append bytes to the record.
</summary>
            <param name="data">The data to be appended to the record.</param>
            <remarks>
This method is called to pass the data from the event or result to the record.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBByteArrayInputRecord.#ctor(IBM.Broker.Plugin.Connector.NBInputConnector)">
            <summary>
Initializes a new instance of the <see cref="T:IBM.Broker.Plugin.Connector.NBByteArrayInputRecord" /> class.
</summary>
            <param name="connector">The owning connector.</param>
        </member>
        <member name="T:IBM.Broker.Plugin.Connector.NBByteArrayInputRecord">
            <summary>
NBByteArrayInputRecord provides a default class to handle input records for polling results and events.
</summary>
            <remarks>
                <para>
This class provides default handling of byte array records. You need only override methods where the default behaviour needs changing.
</para>
                <para>
A record represents a single message to be sent down a message flow. The node's input parsing options are used to parse the byte array given.
</para>
            </remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBByteArrayPollingResult.Offset">
            <summary>
Returns the offset passed in on the constructor, or if the two argument constructor was used, the <c>Length</c> of the byte array.
</summary>
            <value>The provided offset or the Length of the byte array.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBByteArrayPollingResult.GetBytes">
            <summary>
Returns the data associated with this result.
</summary>
            <returns>The byte array passed in on the constructor.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBByteArrayPollingResult.BuildInputRecord">
            <summary>
Provides a default implementation of BuildInputRecord.
</summary>
            <remarks>
If not overridden, a new NBByteArrayInputRecord is returned, populated from the given data.
</remarks>
            <returns>A new NBInputRecord.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBByteArrayPollingResult.#ctor(IBM.Broker.Plugin.Connector.NBPollingInputConnector,System.Byte[],System.Int64)">
            <summary>
Provides a default implementation.
</summary>
            <remarks>
A range from <c>data</c> between 0 and offset will be used.
</remarks>
            <param name="connector">The owning connector.</param>
            <param name="data">The data to be passed to the flow.</param>
            <param name="offset">The offset into data.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if offset is negative or greater than the Length of <c>data</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBByteArrayPollingResult.#ctor(IBM.Broker.Plugin.Connector.NBPollingInputConnector,System.Byte[])">
            <summary>
Provides a default implementation.
</summary>
            <param name="connector">The owning connector.</param>
            <param name="data">The data to be passed to the flow.</param>
        </member>
        <member name="T:IBM.Broker.Plugin.Connector.NBByteArrayPollingResult">
            <summary>
NBByteArrayPollingResult provides a default class to handle byte array based polling results.
</summary>
            <remarks>
This class provides default handling of byte array results. You need only override methods where the default behaviour needs changing.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBComputeNode.OnDelete">
            <summary>
Called when a flow is stopped or deleted.
</summary>
            <remarks>
This method can optionally be overridden to provide place for clean-up to be performed.
If this method throws an exception it will be ignored.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBComputeNode.Evaluate(IBM.Broker.Plugin.NBMessageAssembly)">
            <summary>
Evalute is the main entry point for the node. It is called once each each time a message passes through the node.
</summary>
            <param name="inputAssembly">The <c>NBMessageAssembly</c> which contains the input message trees.</param>
            <remarks>
                <para>
This method must be reentrant as it may be called on multiple threads simultaneously.
</para>
                <para>
If this method throws an exception it will be passed to the Failure terminal as an ExceptionList if the Failure terminal is wired. 
If the Failure terminal is not wired the exception will be passed back up the flow to any previous Catch terminals or ESQL HANDLERs. 
If the exception arrives back at the flow's Input node without being handled then the current message will be rolled back and the 
exception will be logged to the Event Log.
</para>
            </remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBComputeNode.OnInitialize">
            <summary>
Called before a message flow deploy is committed.
</summary>
            <remarks>
This method can optionally be overridden to provide place for initialization to be performed before the node starts processing 
messages. If this method throws an exception, the message flow deploy will fail as the exception will cause the deployment to be rolled back.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBComputeNode">
            <summary>
This is the main abstract base class, from which all .NETCompute nodes derive.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBNode.GetUserDefinedPropertyAsString(System.String)">
            <summary>
Returns the value of the requested user defined property as a string.
</summary>
            <param name="propertyName">The name of the property.</param>
            <returns>The value of the requested property converted to a string.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBNode.GetUserDefinedProperty(System.String)">
            <summary>
Returns the value of the requested user defined property.
</summary>
            <param name="propertyName">The name of the property.</param>
            <returns>The value of the requested property.</returns>
        </member>
        <member name="P:IBM.Broker.Plugin.NBNode.Name">
            <summary>
Gets the name (label) of the node.
</summary>
            <param name="name">The name of the node.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBNode.CreateExceptionList(System.Exception,IBM.Broker.Plugin.NBMessage)">
            <summary>
Constructs a new exception list from the given exception and places into the given <see cref="T:IBM.Broker.Plugin.NBMessage" />.
</summary>
            <param name="exception">The exception to turn into an exception list.</param>
            <param name="exceptionList">The message where the exception list will be placed.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBNode.CreateExceptionFromExceptionList(IBM.Broker.Plugin.NBMessage)">
            <summary>
Constructs an <see cref="T:IBM.Broker.Plugin.NBException" /> from a broker exception list.
</summary>
            <param name="exceptionList">The message representing the exception list.</param>
            <returns>The NBException.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBNode.GetAllRoutes">
            <summary>
Returns a collection of all labels asociated with the message flow that this node belongs to.
</summary>
            <returns>All the label nodes associated with this message flow .</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBNode.GetRoute(System.String)">
            <summary>
Returns an <see cref="T:IBM.Broker.Plugin.NBRoute" /> object matching the label name passed as an argument, 
or null if the matching label node does not exist.
</summary>
            <param name="label">The label.</param>
            <returns>Returns the NBRoute.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBNode.GetAllOutputTerminals">
            <summary>
Returns a collection of all output terminals belonging to this node. 
</summary>
            <returns>All output terminals belonging to this node.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBNode.OutputTerminal(System.String)">
            <summary>
Returns an NBOutputTerminal matching the name passed as an argument, or
null if the terminal does not exist.
</summary>
            <param name="terminalName"> The name of the output terminal.</param>
            <returns>The NBOutputTerminal associcated with the name, or null if one does not exist on this node.</returns>
        </member>
        <member name="T:IBM.Broker.Plugin.NBNode">
            <summary>
NBNode represents a broker .NET plugin node and provides utility methods allowing the node to interact with the broker. 
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBPollingInputConnector.ReadData(System.TimeSpan)">
            <summary>
Called by the Integration Bus to obtain data to be processed.
</summary>
            <remarks>
                <para>
The method returns when it has data or when the timeout interval has elapsed. It can return early if it wishes, and
returning early is preferred over returning late.
</para>
                <para>
If the source you are retrieving data from supports a timed poll mechanism, then make sure it waits for no longer than the given <c>timeout</c> value.
However, if the source does not support direct polling, it it better to make a single attempt to get data and then return early rather than code a loop
to make repeated attempts at obtaining data. It is also good practice not to call Sleep during this method. Return an <c>NBTimeoutPollingResult</c> instead.
</para>
            </remarks>
            <param name="timeout">The maximum time the method should wait for data before returning.</param>
            <returns>A result representing data for processing or a timeout.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBPollingInputConnector.LogNoData">
            <summary>
This is called by the broker when no data has been received for a while.
</summary>
            <remarks>
If it is not overridden then a standard activity log message is written stating it is waiting for data.
Throwing an exception will cause no activity log message to be written out.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBPollingInputConnector.#ctor(IBM.Broker.Plugin.Connector.NBConnectorFactory,System.String,System.Collections.Generic.Dictionary`2{System.String,System.String})">
            <summary>
Constructor that must be used to create <c>NBPollingInputConnector</c> objects.
</summary>
            <param name="connectorFactory">The owning factory.</param>
            <param name="name">The name of the connector.</param>
            <param name="properties">Contains any user properties placed on the node using this connector.</param>
        </member>
        <member name="T:IBM.Broker.Plugin.Connector.NBPollingInputConnector">
            <summary>
                <c>NBPollingInputConnector</c> is the base class which must be extended to implement a connector which can receive data from the system.
</summary>
            <remarks>
                <para>
It is used by IBM Integration Bus to obtain data from a system. 
</para>
                <para>
The NBPollingInputConnector is constructed when a node requiring its function is constructed (for example: a DotNetInputNode). The following methods are called by 
Integration Bus to interact with the connector:
<list type="bullet"><item><see cref="M:IBM.Broker.Plugin.Connector.NBConnector.Initialize" /> is called when a node using the connector is constructed.</item><item><see cref="M:IBM.Broker.Plugin.Connector.NBInputConnector.Start" /> is called when a node using the connector is ready to receive data.</item><item><see cref="M:IBM.Broker.Plugin.Connector.NBInputConnector.Finish" /> is called when a node using the connector is no longer ready to receive data.</item><item><see cref="M:IBM.Broker.Plugin.Connector.NBConnector.Terminate" /> is called when the node is stopped or destroyed.</item></list></para>
                <para>
The connector writer constructs <see cref="T:IBM.Broker.Plugin.Connector.NBPollingResult" /> objects which are returned to Integration Bus from the <see cref="M:IBM.Broker.Plugin.Connector.NBPollingInputConnector.ReadData(System.TimeSpan)" /> method.
</para>
            </remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetPlainEnumerator">
            <summary>
The GetPlainEnumerator method returns a plain IEnumerator for the children of the NBElement being operated on.
</summary>
            <returns>A plain IEnumerator.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetGenericEnumerator">
            <summary>
The GetGenericEnumerator method returns an NBElementEnumerator for the children of the NBElement being operated on. 
</summary>
            <returns>An NBElementEnumerator.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.ToString">
            <summary>
The ToString method returns a String representation of the NBElement being operated on.
</summary>
            <returns>String representation of the NBElement.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.AsBitStream(System.Int32,System.Int32,System.String,System.String,System.String,IBM.Broker.Plugin.NBBitStreamControl)">
            <summary>
The AsBitStream method returns a BitStream representation (serialized form) of the NBElement's hierarchy being operated on, using the given encoding, ccsid, message set, message type, message format and options. 
</summary>
            <remarks> 
This method causes the parser associated with the element to serialize the element and all its children.
</remarks>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <param name="messageSet">The message set definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageType">The message type definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageFormat">The message format definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="options">The <see cref="T:IBM.Broker.Plugin.NBBitStreamControl" /> options used to generate the bit stream.</param>
            <returns>Bitstream representation of the element and all its children.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.AsBitStream(System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
The AsBitStream method returns a BitStream representation (serialized form) of the NBElement's hierarchy being operated on, using the given encoding, ccsid, message set, message type and message format.
</summary>
            <remarks> 
This method causes the parser associated with the element to serialize the element and all its children.
</remarks>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <param name="messageSet">The message set definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageType">The message type definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageFormat">The message format definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <returns>Bitstream representation of the element and all its children.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.AsBitStream(System.Int32,System.Int32,IBM.Broker.Plugin.NBBitStreamControl)">
            <summary>
The AsBitStream method returns a BitStream representation (serialized form) of the NBElement's hierarchy being operated on, using the given encoding, ccsid and options. 
</summary>
            <remarks> 
This method causes the parser associated with the element to serialize the element and all its children.
</remarks>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. This parameter is mandatory. <remarks>A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <param name="options">The <see cref="T:IBM.Broker.Plugin.NBBitStreamControl" /> options used to generate the bit stream.</param>
            <returns>Bitstream representation of the element and all its children.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.AsBitStream(System.Int32,System.Int32)">
            <summary>
The AsBitStream method returns a BitStream representation (serialized form) of the NBElement's hierarchy being operated on, using the given encoding and ccsid. 
</summary>
            <remarks> 
This method causes the parser associated with the element to serialize the element and all its children.
</remarks>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <returns>Bitstream representation of the element and all its children.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.AsBitStream(IBM.Broker.Plugin.NBBitStreamControl)">
            <summary>
The AsBitStream method returns a BitStream representation (serialized form) of the NBElement's hierarchy being operated on, using the given options. 
</summary>
            <remarks> 
This method causes the parser associated with the element to serialize the element and all its children.
</remarks>
            <param name="options">The <see cref="T:IBM.Broker.Plugin.NBBitStreamControl" /> options used to generate the bit stream.</param>
            <returns>Bitstream representation of the element and all its children.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.AsBitStream">
            <summary>
The AsBitStream method returns a BitStream representation (serialized form) of the NBElement's hierarchy being operated on.
</summary>
            <remarks> 
This method causes the parser associated with the element to serialize the element and all its children.
</remarks>
            <returns>Bitstream representation of the element and all its children.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateAfterFromBitStream(System.Byte[],System.String,System.Int32,System.Int32,System.String,System.String,System.String,IBM.Broker.Plugin.NBBitStreamControl)">
            <summary>
The CreateAfterFromBitStream method creates as the next sibling a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding, ccsid, messageSet, messageType, messageFormat and options. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <param name="messageSet">The message set definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageType">The message type definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageFormat">The message format definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="options">The <see cref="T:IBM.Broker.Plugin.NBBitStreamControl" /> options used to parse the bitstream.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateAfterFromBitStream(System.Byte[],System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
The CreateAfterFromBitStream method creates as the next sibling a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding, ccsid, messageSet, messageType and messageFormat. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <param name="messageSet">The message set definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageType">The message type definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageFormat">The message format definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateAfterFromBitStream(System.Byte[],System.String,System.Int32,System.Int32,IBM.Broker.Plugin.NBBitStreamControl)">
            <summary>
The CreateAfterFromBitStream method creates as the next sibling a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding, ccsid and options. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. This parameter is mandatory. <remarks>A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <param name="options">The <see cref="T:IBM.Broker.Plugin.NBBitStreamControl" /> options used to parse the bitstream.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateAfterFromBitStream(System.Byte[],System.String,System.Int32,System.Int32)">
            <summary>
The CreateAfterFromBitStream method creates as the next sibling a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding and ccsid. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. This parameter is mandatory. <remarks>A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateAfterFromBitStream(System.Byte[],System.String)">
            <summary>
The CreateAfterFromBitStream method creates as the next sibling a new NBElement and its hierarchy which is populated using the given BitStream and Parser. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateAfterFromBitStream(System.Byte[])">
            <summary>
The CreateAfterFromBitStream method creates as the next sibling a new NBElement and its hierarchy which is populated using the given BitStream. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateBeforeFromBitStream(System.Byte[],System.String,System.Int32,System.Int32,System.String,System.String,System.String,IBM.Broker.Plugin.NBBitStreamControl)">
            <summary>
The CreateBeforeFromBitStream method creates as the previous sibling a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding, ccsid, messageSet, messageType, messageFormat and options. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. The same parser must be used to parse the whole bit stream.</param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <param name="messageSet">The message set definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageType">The message type definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageFormat">The message format definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="options">The <see cref="T:IBM.Broker.Plugin.NBBitStreamControl" /> options used to parse the bitstream.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateBeforeFromBitStream(System.Byte[],System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
The CreateBeforeFromBitStream method creates as the previous sibling a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding, ccsid, messageSet, messageType and messageFormat. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <param name="messageSet">The message set definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageType">The message type definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageFormat">The message format definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateBeforeFromBitStream(System.Byte[],System.String,System.Int32,System.Int32,IBM.Broker.Plugin.NBBitStreamControl)">
            <summary>
The CreateBeforeFromBitStream method creates as the previous sibling a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding, ccsid and options. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. This parameter is mandatory. <remarks>A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <param name="options">The <see cref="T:IBM.Broker.Plugin.NBBitStreamControl" /> options used to parse the bitstream.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateBeforeFromBitStream(System.Byte[],System.String,System.Int32,System.Int32)">
            <summary>
The CreateBeforeFromBitStream method creates as the previous sibling a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding and ccsid. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateBeforeFromBitStream(System.Byte[],System.String)">
            <summary>
The CreateBeforeFromBitStream method creates as the previous sibling a new NBElement and its hierarchy which is populated using the given BitStream and Parser. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateBeforeFromBitStream(System.Byte[])">
            <summary>
The CreateBeforeFromBitStream method creates as the previous sibling a new NBElement and its hierarchy which is populated using the given BitStream. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateFirstChildFromBitStream(System.Byte[],System.String,System.Int32,System.Int32,System.String,System.String,System.String,IBM.Broker.Plugin.NBBitStreamControl)">
            <summary>
The CreateFirstChildFromBitStream method creates as the first child a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding, ccsid, messageSet, messageType, messageFormat and options. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. The same parser must be used to parse the whole bit stream.</param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <param name="messageSet">The message set definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageType">The message type definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageFormat">The message format definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="options">The <see cref="T:IBM.Broker.Plugin.NBBitStreamControl" /> options used to parse the bitstream.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateFirstChildFromBitStream(System.Byte[],System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
The CreateFirstChildFromBitStream method creates as the first child a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding, ccsid, messageSet, messageType and messageFormat. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <param name="messageSet">The message set definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageType">The message type definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageFormat">The message format definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateFirstChildFromBitStream(System.Byte[],System.String,System.Int32,System.Int32,IBM.Broker.Plugin.NBBitStreamControl)">
            <summary>
The CreateFirstChildFromBitStream method creates as the first child a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding, ccsid and options. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <param name="options">The <see cref="T:IBM.Broker.Plugin.NBBitStreamControl" /> options used to parse the bitstream.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateFirstChildFromBitStream(System.Byte[],System.String,System.Int32,System.Int32)">
            <summary>
The CreateFirstChildFromBitStream method creates as the first child a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding and ccsid. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateFirstChildFromBitStream(System.Byte[],System.String)">
            <summary>
The CreateFirstChildFromBitStream method creates as the first child a new NBElement and its hierarchy which is populated using the given BitStream and Parser. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateFirstChildFromBitStream(System.Byte[])">
            <summary>
The CreateFirstChildFromBitStream method creates as the first child a new NBElement and its hierarchy which is populated using the given BitStream. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateLastChildFromBitStream(System.Byte[],System.String,System.Int32,System.Int32,System.String,System.String,System.String,IBM.Broker.Plugin.NBBitStreamControl)">
            <summary>
The CreateLastChildFromBitStream method creates as the last child a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding, ccsid, messageSet, messageType, messageFormat and options. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <param name="messageSet">The message set definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageType">The message type definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageFormat">The message format definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="options">The <see cref="T:IBM.Broker.Plugin.NBBitStreamControl" /> options used to parse the bitstream.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateLastChildFromBitStream(System.Byte[],System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
The CreateLastChildFromBitStream method creates as the last child a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding, ccsid, messageSet, messageType and messageFormat. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <param name="messageSet">The message set definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageType">The message type definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <param name="messageFormat">The message format definition used to create the element tree from the bit stream. <remarks>A value of null will cause this parameter to be ignored.</remarks></param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateLastChildFromBitStream(System.Byte[],System.String,System.Int32,System.Int32,IBM.Broker.Plugin.NBBitStreamControl)">
            <summary>
The CreateLastChildFromBitStream method creates as the last child a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding, ccsid and options. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <param name="options">The <see cref="T:IBM.Broker.Plugin.NBBitStreamControl" /> options used to parse the bitstream.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateLastChildFromBitStream(System.Byte[],System.String,System.Int32,System.Int32)">
            <summary>
The CreateLastChildFromBitStream method creates as the last child a new NBElement and its hierarchy which is populated using the given BitStream, Parser, encoding and ccsid. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. <remarks>The same parser must be used to parse the whole bit stream.</remarks></param>
            <param name="encoding">The encoding to use when parsing the bit stream. <remarks>A special value of 0 may be supplied to indicate that the queue manager's encoding should be used.</remarks></param>
            <param name="ccsid">The coded character set identifier to use when parsing the bit stream. <remarks>This parameter is mandatory. A special value of 0 may be supplied to indicate that the queue manager's ccsid should be used.</remarks></param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateLastChildFromBitStream(System.Byte[],System.String)">
            <summary>
The CreateLastChildFromBitStream method creates as the last child a new NBElement and its hierarchy which is populated using the given BitStream and Parser. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <param name="parserName">The name of the parser class to use to parse the bit stream. The same parser must be used to parse the whole bit stream.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateLastChildFromBitStream(System.Byte[])">
            <summary>
The CreateLastChildFromBitStream method creates as the last child a new NBElement and its hierarchy which is populated using the given BitStream. 
</summary>
            <param name="bitStream">The bit stream to be parsed and added to the element tree.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateAfter(System.Int32,System.String,System.String,System.Object)">
            <summary>
The CreateAfter method creates as the next sibling a new NBElement with the given Type, Namespace, Name and Value.
</summary>
            <param name="type">The type of the element to be created.</param>
            <param name="space">The space of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <param name="value">The value of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateAfter(System.String,System.String,System.Object)">
            <summary>
The CreateAfter method creates as the next sibling a new NBElement with the given Namespace, Name and Value.
</summary>
            <param name="space">The space of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <param name="value">The value of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateAfter(System.Int32,System.String,System.Object)">
            <summary>
The CreateAfter method creates as the next sibling a new NBElement with the given Type, Name and Value.
</summary>
            <param name="type">The type of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <param name="value">The value of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateAfter(System.String,System.String)">
            <summary>
The CreateAfter method creates as the next sibling a new NBElement with the given Namespace and Name.
</summary>
            <param name="space">The space of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateAfter(System.String)">
            <summary>
The CreateAfter method creates as the next sibling a new NBElement with the given Name.
</summary>
            <param name="name">The name of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateAfter(System.Int32)">
            <summary>
The CreateAfter method creates as the next sibling a new NBElement with the given Type.
</summary>
            <param name="type">The type of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateBefore(System.Int32,System.String,System.String,System.Object)">
            <summary>
The CreateBefore method creates as the previous sibling a new NBElement with the given Type, Namespace, Name and Value.
</summary>
            <param name="type">The type of the element to be created.</param>
            <param name="space">The space of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <param name="value">The value of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateBefore(System.String,System.String,System.Object)">
            <summary>
The CreateBefore method creates as the previous sibling a new NBElement with the given Namespace, Name and Value.
</summary>
            <param name="space">The space of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <param name="value">The value of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateBefore(System.Int32,System.String,System.Object)">
            <summary>
The CreateBefore method creates as the previous sibling a new NBElement with the given Type, Name and Value.
</summary>
            <param name="type">The type of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <param name="value">The value of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateBefore(System.String,System.String)">
            <summary>
The CreateBefore method creates as the previous sibling a new NBElement with the given Namespace and Name.
</summary>
            <param name="space">The space of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateBefore(System.String)">
            <summary>
The CreateBefore method creates as the previous sibling a new NBElement with the given Name.
</summary>
            <param name="name">The name of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateBefore(System.Int32)">
            <summary>
The CreateBefore method creates as the previous sibling a new NBElement with the given Type.
</summary>
            <param name="type">The type of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateFirstChild(System.Int32,System.String,System.String,System.Object)">
            <summary>
The CreateFirstChild method creates as the first child a new NBElement with the given Type, Namespace, Name and Value.
</summary>
            <param name="type">The type of the element to be created.</param>
            <param name="space">The space of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <param name="value">The value of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateFirstChild(System.String,System.String,System.Object)">
            <summary>
The CreateFirstChild method creates as the first child a new NBElement with the given Namespace, Name and Value.
</summary>
            <param name="space">The space of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <param name="value">The value of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateFirstChild(System.Int32,System.String,System.Object)">
            <summary>
The CreateFirstChild method creates as the first child a new NBElement with the given Type, Name and Value.
</summary>
            <param name="type">The type of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <param name="value">The value of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateFirstChild(System.String,System.String)">
            <summary>
The CreateFirstChild method creates as the first child a new NBElement with the given Namespace and Name.
</summary>
            <param name="space">The space of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateFirstChild(System.String)">
            <summary>
The CreateFirstChild method creates as the first child a new NBElement with the given Name.
</summary>
            <param name="name">The name of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateFirstChild(System.Int32)">
            <summary>
The CreateFirstChild method creates as the first child a new NBElement with the given Type.
</summary>
            <param name="type">The type of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateLastChild(System.Int32,System.String,System.String,System.Object)">
            <summary>
The CreateLastChild method creates as the last child a new NBElement with the given type, Namespace, Name and Value. 
</summary>
            <param name="type">The type of the element to be created.</param>
            <param name="space">The space of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <param name="value">The value of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateLastChild(System.String,System.String,System.Object)">
            <summary>
The CreateLastChild method creates as the last child a new NBElement with the given Namespace, Name and Value.
</summary>
            <param name="space">The space of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <param name="value">The value of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateLastChild(System.Int32,System.String,System.Object)">
            <summary>
The CreateLastChild method creates as the last child a new NBElement with the given Type, Name and Value.
</summary>
            <param name="type">The type of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <param name="value">The value of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateLastChild(System.String,System.String)">
            <summary>
The CreateLastChild method creates as the last child a new NBElement with the given Namespace and Name. 
</summary>
            <param name="space">The space of the element to be created.</param>
            <param name="name">The name of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateLastChild(System.String)">
            <summary>
The CreateLastChild method creates as the last child a new NBElement with the given Name.
</summary>
            <param name="name">The name of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateLastChild(System.Int32)">
            <summary>
The CreateLastChild method creates as the last child a new NBElement with the given Type.
</summary>
            <param name="type">The type of the element to be created.</param>
            <returns>The NBElement which is created.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateAfterUsingNewParser(System.String)">
            <summary>
The CreateAfterUsingNewParser method creates as the next sibling a new NBElement in the logical tree that belongs to the specified parser. 
</summary>
            <param name="parserName">The name of the parser class. The supplied parser constants give values for some of the IBM supplied parsers.</param>
            <returns>The NBElement which is associated with the specified parser.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateBeforeUsingNewParser(System.String)">
            <summary>
The CreateBeforeUsingNewParser method creates as the previous sibling a new NBElement in the logical tree that belongs to the specified parser. 
</summary>
            <param name="parserName">The name of the parser class. The supplied parser constants give values for some of the IBM supplied parsers.</param>
            <returns>The NBElement which is associated with the specified parser.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateFirstChildUsingNewParser(System.String)">
            <summary>
The CreateFirstChildUsingNewParser method creates as the first child a new NBElement in the logical tree that belongs to the specified parser.
</summary>
            <param name="parserName">The name of the parser class. The supplied parser constants give values for some of the IBM supplied parsers.</param>
            <returns>The NBElement which is associated with the specified parser.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.CreateLastChildUsingNewParser(System.String)">
            <summary>
The CreateLastChildUsingNewParser method creates as the last child a new NBElement in the logical tree that belongs to the specified parser. 
</summary>
            <param name="parserName">The name of the parser class. The supplied parser constants give values for some of the IBM supplied parsers.</param>
            <returns>The NBElement which is associated with the specified parser.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.ReplaceAllChildren(IBM.Broker.Plugin.NBElement)">
            <summary>
The ReplaceAllChildren method deletes all the children of the NBElement being operated on and replaces them with the given NBElement. 
</summary>
            <param name="source">The source element.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.DeleteAllChildren">
            <summary>
The DeleteAllChildren method deletes all the children of the NBElement being operated on from the logical element tree. 
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.Delete">
            <summary>
The Delete method deletes the NBElement being operated on from the logical element tree. 
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.DetachAllChildren">
            <summary>
The DetachAllChildren method detaches all the children of the NBElement being operated on from the logical element tree. 
</summary>
            <returns>All detached elements.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.Detach">
            <summary>
The Detach method detaches the NBElement being operated on from the logical element tree. 
</summary>
            <returns>The detached element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.AddAfter(IBM.Broker.Plugin.NBElement)">
            <summary>
The AddAfter method attaches as the next sibling the given NBElement and its children, or a copy of the given NBElement if it is still attached somewhere else. 
</summary>
            <remarks>
An unattached element (an element with no parent), and any child elements it might possess, is connected to the element tree as the next sibling of the target (this) element.
An attached element (an element that has a parent) is copied and the copy is connected to the element tree as the next sibling of the target (this) element.
</remarks>
            <param name="source">The source element.</param>
            <returns>The after element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.AddBefore(IBM.Broker.Plugin.NBElement)">
            <summary>
The AddBefore method attaches as the previous sibling the given NBElement and its children, or a copy of the given NBElement if it is still attached somewhere else. 
</summary>
            <remarks>
An unattached element (an element with no parent), and any child elements it might possess, is connected to the element tree as the previous sibling of the target (this) element.
An attached element (an element that has a parent) is copied and the copy is connected to the element tree as the previous sibling of the target (this) element.
</remarks>
            <param name="source">The source element.</param>
            <returns>The before element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.AddFirstChild(IBM.Broker.Plugin.NBElement)">
            <summary>
The AddFirstChild method attaches as the first child the given NBElement and its children, or a copy of the given NBElement if it is still attached somewhere else. 
</summary>
            <remarks>
An unattached element (an element with no parent), and any child elements it might possess, is connected to the element tree as the first child of the target (this) element.
An attached element (an element that has a parent) is copied and the copy is connected to the element tree as the first child of the target (this) element.
</remarks>
            <param name="source">The source element.</param>
            <returns>The first child element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.AddLastChild(IBM.Broker.Plugin.NBElement)">
            <summary>
The AddLastChild method attaches as the last child the given NBElement and its children, or a copy of the given NBElement if it is still attached somewhere else. 
</summary>
            <remarks>
An unattached element (an element with no parent), and any child elements it might possess, is connected to the element tree as the last child of the target (this) element.
An attached element (an element that has a parent) is copied and the copy is connected to the element tree as the last child of the target (this) element.
</remarks>
            <param name="source">The source element.</param>
            <returns>The last child element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.op_Explicit(IBM.Broker.Plugin.NBElement)~System.Nullable`1">
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a Nullable&lt;Int32&gt; value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>Nullable&lt;Int32&gt;</c>.</exception>
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a Nullable&lt;Int64&gt; value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>Nullable&lt;Int64&gt;</c>.</exception>
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a Nullable&lt;Decimal&gt; value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>Nullable&lt;Decimal&gt;</c>.</exception>
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a Nullable&lt;double&gt; value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>Nullable&lt;double&gt;</c>.</exception>
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a Nullable&lt;bool&gt; value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>Nullable&lt;bool&gt;</c>.</exception>
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a Nullable&lt;DateTime&gt; value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>Nullable&lt;DateTime&gt;</c>.</exception>
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a Nullable&lt;TimeSpan&gt; value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>Nullable&lt;TimeSpan&gt;</c>.</exception>
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a Nullable&lt;DateTimeOffset&gt; value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>Nullable&lt;DateTimeOffset&gt;</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.op_Explicit(IBM.Broker.Plugin.NBElement)~System.DateTimeOffset">
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a DateTimeOffset value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>DateTimeOffset</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.op_Explicit(IBM.Broker.Plugin.NBElement)~System.TimeSpan">
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a TimeSpan value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>TimeSpan</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.op_Explicit(IBM.Broker.Plugin.NBElement)~System.DateTime">
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a DateTime value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>DateTime</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.op_Explicit(IBM.Broker.Plugin.NBElement)~System.Boolean">
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a Boolean value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>Boolean</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.op_Explicit(IBM.Broker.Plugin.NBElement)~System.String">
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a String value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>String</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.op_Explicit(IBM.Broker.Plugin.NBElement)~System.Byte[]">
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a Byte[] value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>Byte[]</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.op_Explicit(IBM.Broker.Plugin.NBElement)~System.Collections.BitArray">
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a BitArray value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>BitArray</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.op_Explicit(IBM.Broker.Plugin.NBElement)~System.Double">
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a Double value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>Double</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.op_Explicit(IBM.Broker.Plugin.NBElement)~System.Decimal">
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to a Decimal value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>Decimal</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.op_Explicit(IBM.Broker.Plugin.NBElement)~System.Int64">
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to an Int64 value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>Int64</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.op_Explicit(IBM.Broker.Plugin.NBElement)~System.Int32">
            <summary>
The cast operator method retrieves the value of the NBElement and explicitly casts it to an Int value.
</summary>
            <param name="value">The NBElement whose value is to be cast.</param>
            <returns>The current element's value cast to the specified type.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value can not be converted to a <c>Int32</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetNullableDateTimeOffset">
            <summary>
The GetNullableDateTimeOffset method returns a Nullable&lt;DateTimeOffset&gt; value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>Nullable&lt;DateTimeOffset&gt;</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetDateTimeOffset">
            <summary>
The GetDateTimeOffset method returns a DateTimeOffset value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>DateTimeOffset</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetNullableTimeSpan">
            <summary>
The GetNullableTimeSpan method returns a Nullable&lt;TimeSpan&gt; value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>Nullable&lt;TimeSpan&gt;</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetTimeSpan">
            <summary>
The GetTimeSpan method returns a TimeSpan value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>TimeSpan</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetNullableDateTime">
            <summary>
The GetNullableDateTime method returns a Nullable&lt;DateTime&gt; value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>Nullable&lt;DateTime&gt;</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetDateTime">
            <summary>
The GetDateTime method returns a DateTime value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>DateTime</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetNullableBoolean">
            <summary>
The GetNullableBoolean method returns a Nullable&lt;bool&gt; value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>Nullable&lt;bool&gt;</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetBoolean">
            <summary>
The GetBoolean method returns a Boolean value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>Boolean</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetString">
            <summary>
The GetString method returns a String value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>String</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetByteArray">
            <summary>
The GetByteArray method returns an Byte[] value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>Byte[]</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetBitArray">
            <summary>
The GetBitArray method returns a BitArray value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>BitArray</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetNullableDouble">
            <summary>
The GetNullableDouble method returns a Nullable&lt;Double&gt; value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>Nullable&lt;Double&gt;</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetDouble">
            <summary>
The GetDouble method returns a Double value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>Double</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetNullableDecimal">
            <summary>
The GetNullableDecimal method returns a Nullable&lt;Decimal&gt; value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>Nullable&lt;Decimal&gt;</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetDecimal">
            <summary>
The GetDecimal method returns a Decimal value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>Decimal</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetNullableInt64">
            <summary>
The GetNullableInt64 method returns a Nullable&lt;Int64&gt; value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>Nullable&lt;Int64&gt;</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetNullableInt32">
            <summary>
The GetNullableInt32 method returns a Nullable&lt;Int32&gt; value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>Nullable&lt;Int32&gt;</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetInt64">
            <summary>
The GetInt64 method returns an Int64 value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>Int64</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.GetInt32">
            <summary>
The GetInt32 method returns an Int value containing the value of the NBElement.
</summary>
            <returns>The current element's value.</returns>
            <exception cref="T:IBM.Broker.Plugin.NBRecoverableException">Thrown if the value of the element is not of type <c>Int32</c>.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Object)">
            <summary>
The SetValue method assigns the given Object's value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <remarks>
If the Object's type is one of the types listed in <see cref="T:IBM.Broker.Plugin.NBElementValueType" /> that have a direct mapping to a broker type
then the value of the element is set to the mapped type. If the type is not one of the mapped types, then ToString() is called on the object 
and its value is inserted as a string.
</remarks>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Nullable`1{System.DateTimeOffset})">
            <summary>
The SetValue method assigns the given Nullable&lt;DateTimeOffset&gt; value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.DateTimeOffset)">
            <summary>
The SetValue method assigns the given DateTimeOffset value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Nullable`1{System.DateTimeOffset},IBM.Broker.Plugin.NBElementDateTimeType)">
            <summary>
The SetValue method assigns the given Nullable&lt;DateTimeOffset&gt; value to the NBElement (using the NBElementDateTimeType to determine the sub-type)
and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <param name="type">The type of the object.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.DateTimeOffset,IBM.Broker.Plugin.NBElementDateTimeType)">
            <summary>
The SetValue method assigns the given DateTimeOffset value to the NBElement (using the NBElementDateTimeType to determine the sub-type)
and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <param name="type">The type of the object.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Nullable`1{System.TimeSpan})">
            <summary>
The SetValue method assigns the given Nullable&lt;TimeSpan&gt; value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.TimeSpan)">
            <summary>
The SetValue method assigns the given TimeSpan value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Nullable`1{System.TimeSpan},IBM.Broker.Plugin.NBElementTimeSpanType)">
            <summary>
The SetValue method assigns the given Nullable&lt;TimeSpan&gt; value to the NBElement (using the NBElementTimeSpanType to determine the sub-type)
and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <param name="type">The type of the object.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.TimeSpan,IBM.Broker.Plugin.NBElementTimeSpanType)">
            <summary>
The SetValue method assigns the given TimeSpan value to the NBElement (using the NBElementTimeSpanType to determine the sub-type)
and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <param name="type">The type of the object.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Nullable`1{System.DateTime},IBM.Broker.Plugin.NBElementDateTimeType)">
            <summary>
The SetValue method assigns the given Nullable&lt;DateTime&gt; value to the NBElement (using the NBElementTimeSpanType to determine the sub-type)
and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <param name="type">The type of the object.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.DateTime,IBM.Broker.Plugin.NBElementDateTimeType)">
            <summary>
The SetValue method assigns the given DateTime value to the NBElement (using the NBElementTimeSpanType to determine the sub-type)
and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <param name="type">The type of the object.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Nullable`1{System.DateTime})">
            <summary>
The SetValue method assigns the given Nullable&lt;DateTime&gt; value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.DateTime)">
            <summary>
The SetValue method assigns the given DateTime value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Nullable`1{System.Boolean})">
            <summary>
The SetValue method assigns the given Nullable&lt;bool&gt; value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Boolean)">
            <summary>
The SetValue method assigns the given Boolean value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">Boolean value of the object.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Nullable`1{System.Char})">
            <summary>
The SetValue method assigns the given Nullable&lt;char&gt; value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Char)">
            <summary>
The SetValue method assigns the given Char value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.String)">
            <summary>
The SetValue method assigns the given String value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Byte[])">
            <summary>
The SetValue method assigns the given array unasigned char value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Collections.BitArray)">
            <summary>
The SetValue method assigns the given BitArray value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Nullable`1{System.Single})">
            <summary>
The SetValue method assigns the given Nullable&lt;Single&gt; value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Single)">
            <summary>
The SetValue method assigns the given Single value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The single value of the object.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Nullable`1{System.Double})">
            <summary>
The SetValue method assigns the given Nullable&lt;double&gt; value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Double)">
            <summary>
The SetValue method assigns the given Double value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Nullable`1{System.Decimal})">
            <summary>
The SetValue method assigns the given Nullable&lt;Decimal&gt; value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Decimal)">
            <summary>
The SetValue method assigns the given Decimal value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Nullable`1{System.Int64})">
            <summary>
The SetValue method assigns the given Nullable&lt;Int64&gt; value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Nullable`1{System.Int32})">
            <summary>
The SetValue method assigns the given Nullable&lt;int&gt; value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Nullable`1{System.Int16})">
            <summary>
The SetValue method assigns the given Nullable&lt;Int16&gt; value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Nullable`1{System.Byte})">
            <summary>
The SetValue method assigns the given Nullable&lt;Byte&gt; value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Int64)">
            <summary>
The SetValue method assigns the given Int64 value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Int32)">
            <summary>
The SetValue method assigns the given Int value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Int16)">
            <summary>
The SetValue method assigns the given Int16 value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.SetValue(System.Byte)">
            <summary>
The SetValue method assigns the given Byte value to the NBElement and returns the current NBElement (whose value is set).
</summary>
            <param name="value">The value to set.</param>
            <returns>The current element.</returns>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.ValueAsString">
            <summary>
The ValueAsString property provides the value of the value of the NBElement, converted to a string. 
</summary>
            <value>ValueAsString returns the value of the element converted to a string.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.FindOrCreate(System.Int32,System.String,System.String,System.Int32)">
            <summary>
The FindOrCreate method returns the NBElement with the given Type, Namespace, Name and Index.  If the NBElement is not found then it is created.
</summary>
            <remarks>
                <para>
The index parameter requests that the n'th element with the matching Type, Namespace and Name is returned, where n is the value of the index.
</para>
                <para>
If index is positive, the search is done forwards, starting with the FirstChild of this element.
</para>
                <para>
If index is negative, the search is done backwards, starting with the LastChild of this element.
</para>
            </remarks>
            <param name="type">The type of the child.</param>
            <param name="space">The namespace of the child.</param>
            <param name="name">The name of the child.</param>
            <param name="index">The index of the child.</param>
            <returns>The existing or the new element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.FindOrCreate(System.Int32,System.String,System.String)">
            <summary>
The FindOrCreate method returns the NBElement with the given Type, Namespace and Index.  If the NBElement is not found then it is created.
</summary>
            <param name="type">The type of the child.</param>
            <param name="space">The space of the child.</param>
            <param name="name">The name of the child.</param>
            <returns>The existing or the new element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.FindOrCreate(System.Int32,System.String,System.Int32)">
            <summary>
The FindOrCreate method returns the NBElement with the given Type, Name and Index.  If the NBElement is not found then it is created.
</summary>
            <remarks>
                <para>
The index parameter requests that the n'th element with the matching Type and Name is returned, where n is the value of the index.
</para>
                <para>
If index is positive, the search is done forwards, starting with the FirstChild of this element.
</para>
                <para>
If index is negative, the search is done backwards, starting with the LastChild of this element.
</para>
            </remarks>
            <param name="type">The type of the child.</param>
            <param name="name">The name of the child.</param>
            <param name="index">The index of the child.</param>
            <returns>The existing or the new element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.FindOrCreate(System.Int32,System.String)">
            <summary>
The FindOrCreate method returns the NBElement with the given Type and Name.  If the NBElement is not found then it is created.
</summary>
            <param name="type">The type of the child.</param>
            <param name="name">The name of the child.</param>
            <returns>The exisitng or the new element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.FindOrCreate(System.String,System.String,System.Int32)">
            <summary>
The FindOrCreate method returns the NBElement with the given Namespace, Name and Index.  If the NBElement is not found then it is created.
</summary>
            <remarks>
                <para>
The index parameter requests that the n'th element with the matching Name and Namespace is returned, where n is the value of the index.
</para>
                <para>
If index is positive, the search is done forwards, starting with the FirstChild of this element.
</para>
                <para>
If index is negative, the search is done backwards, starting with the LastChild of this element.
</para>
            </remarks>
            <param name="space">The space of the child.</param>
            <param name="name">The name of the child.</param>
            <param name="index">The index of the child.</param>
            <returns>The existing or the new element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.FindOrCreate(System.String,System.String)">
            <summary>
The FindOrCreate method returns the NBElement with the given Namespace and Name.  If the NBElement is not found then it is created.
</summary>
            <param name="space">The space of the child.</param>
            <param name="name">The name of the child.</param>
            <returns>The existing or the new element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.FindOrCreate(System.String,System.Int32)">
            <summary>
The FindOrCreate method returns the NBElement with the given Name and Index.  If the NBElement is not found then it is created.
</summary>
            <remarks>
                <para>
The index parameter requests that the n'th element with the matching Name is returned, where n is the value of the index.
</para>
                <para>
If index is positive, the search is done forwards, starting with the FirstChild of this element.
</para>
                <para>
If index is negative, the search is done backwards, starting with the LastChild of this element.
</para>
            </remarks>
            <param name="name">The name of the child.</param>
            <param name="index">The index of the child.</param>
            <returns>The existing or the new element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.FindOrCreate(System.String)">
            <summary>
The FindOrCreate method returns the NBElement with the given Name.  If the NBElement is not found then it is created.
</summary>
            <param name="name">The name of the child.</param>
            <returns>The existing or the new element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.FindOrCreate(System.Int32)">
            <summary>
The FindOrCreate method returns the NBElement with the given Type.  If the NBElement is not found then it is created.
</summary>
            <param name="type">The type of the child.</param>
            <returns>The exising or the new element.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.Children(System.Int32,System.String,System.String)">
            <summary>
The Children method returns all child NBElements of this NBElement with the given Type, Namespace and Name.
</summary>
            <param name="type">The type of the child.</param>
            <param name="space">The namespace of the child.</param>
            <param name="name">The name of the child.</param>
            <returns>All children with the given name and namespace.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.Children(System.Int32,System.String)">
            <summary>
The Children method returns all child NBElements of this NBElement with the given Type and Name.
</summary>
            <param name="type">The type of the child.</param>
            <param name="name">The name of the child.</param>
            <returns>All children with the given name and namespace.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.Children(System.String,System.String)">
            <summary>
The Children method returns all child NBElements of this NBElement with the given Namespace and Name.
</summary>
            <param name="space">The namespace of the child.</param>
            <param name="name">The name of the child.</param>
            <returns>All children with the given name and namespace.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.Children(System.String)">
            <summary>
The Children method returns all child NBElements of this NBElement with the given Name.
</summary>
            <param name="name">The name of the child.</param>
            <returns>All children of the given name.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.Children(System.Int32)">
            <summary>
The Children method returns all child NBElements of this NBElement with the given Type.
</summary>
            <param name="type">The type of the child.</param>
            <returns>All children of the given type.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.Children">
            <summary>
The Children method returns all child NBElements of this NBElement.
</summary>
            <returns>All child elements.</returns>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.default(System.Int32,System.String,System.String,System.Int32)">
            <summary>
This default property returns the child NBElement whose Type, Namespace, Name and Index match the Type, Namespace, Name and Index specified. 
</summary>
            <remarks>
                <para>
The index parameter requests that the n'th element with the matching Type, Namespace and Name is returned, where n is the value of the index.
</para>
                <para>
If index is positive, the search is done forwards, starting with the FirstChild of this element.
</para>
                <para>
If index is negative, the search is done backwards, starting with the LastChild of this element.
</para>
            </remarks>
            <param name="type">The type of the element being searched.</param>
            <param name="space">The namespace of the element to search for.</param>
            <param name="name">The name of the element to search for.</param>
            <param name="index">The index of the element being searched.</param>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.default(System.Int32,System.String,System.String)">
            <summary>
This default property returns the child NBElement whose Type, Namespace and Name match the Type, Name and Index specified. 
</summary>
            <param name="type">The type of the element being searched.</param>
            <param name="space">The namespace of the element to search for.</param>
            <param name="name">The name of the element to search for.</param>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.default(System.Int32,System.String,System.Int32)">
            <summary>
This default property returns the child NBElement whose Type, Name and Index match the Type, Name and Index specified. 
</summary>
            <remarks>
                <para>
The index parameter requests that the n'th element with the matching Type and Name is returned, where n is the value of the index.
</para>
                <para>
If index is positive, the search is done forwards, starting with the FirstChild of this element.
</para>
                <para>
If index is negative, the search is done backwards, starting with the LastChild of this element.
</para>
            </remarks>
            <param name="type">The type of the element being searched.</param>
            <param name="name">The name of the element to search for.</param>
            <param name="index">The index of the element being searched.</param>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.default(System.Int32,System.String)">
            <summary>
This default property returns the first child NBElement whose Type and Name match the Type and Name specified. 
</summary>
            <param name="type">The type of the element being searched.</param>
            <param name="name">The name of the element to search for.</param>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.default(System.String,System.String,System.Int32)">
            <summary>
This default property returns the child NBElement whose Namespace, Name and Index match the Namespace, Name and Index specified. 
</summary>
            <remarks>
                <para>
The index parameter requests that the n'th element with the matching Namespace and Name is returned, where n is the value of the index.
</para>
                <para>
If index is positive, the search is done forwards, starting with the FirstChild of this element.
</para>
                <para>
If index is negative, the search is done backwards, starting with the LastChild of this element.
</para>
            </remarks>
            <param name="space">The namespace of the element to search for.</param>
            <param name="name">The name of the element to search for.</param>
            <param name="index">The index of the element being searched.</param>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.default(System.String,System.String)">
            <summary>
This default property returns the first child NBElement whose Namespace and Name match the Namespace and Name specified. 
</summary>
            <param name="space">The namespace of the element to search for.</param>
            <param name="name">The name of the element to search for.</param>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.default(System.String,System.Int32)">
            <summary>
This default property returns the child NBElement whose Name and Index match the Name and Index specified. 
</summary>
            <remarks>
                <para>
The index parameter requests that the n'th element with the matching Name is returned, where n is the value of the index.
</para>
                <para>
If index is positive, the search is done forwards, starting with the FirstChild of this element.
</para>
                <para>
If index is negative, the search is done backwards, starting with the LastChild of this element.
</para>
            </remarks>
            <param name="name">The name of the element to search for.</param>
            <param name="index">The index of the element being searched.</param>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.default(System.String)">
            <summary>
This default property returns the first child NBElement whose Name matches the Name specified. 
</summary>
            <param name="name">The name of the element to search for.</param>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.GenericType">
            <summary>
The GenericType property provides the generic type of the NBElement (which indicates if it has a Name, a Value or both). 
</summary>
            <value>GenericType returns the generic type of the element.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.ElementType">
            <summary>
The ElementType property provides the parser specific type of the NBElement (which typically controls how the logical message is converted to a bitstream). 
</summary>
            <value>Parser specific type of the element.</value>
            <param name="type">ElementType returns the parser specific type of the NBElement.</param>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.ValueType">
            <summary>
The ValueType property provides the parser specific value type of the NBElement (which typically controls how the logical message is converted to a bitstream). 
</summary>
            <value>ValueType returns the broker datatype of the value of the element.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.ValueIsNull">
            <summary>
The ValueIsNull property indicates whether the NBElement's value is specified to be Null (outside the standard value space for its data type). 
</summary>
            <value>ValueIsNull returns true if the value of the element is NULL.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.Namespace">
            <summary>
The Namespace property provides the namespace of the NBElement in the logical (hierarchical) view of the message. 
</summary>
            <value>NameSpace accesses the namespace of the element.</value>
            <param name="space">The namespace of the element.</param>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.Name">
            <summary>
The Name property provides the name of the NBElement in the logical (hierarchical) view of the message. 
</summary>
            <value>Name accesses the name of the element.</value>
            <param name="name">The name of the element.</param>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.LastChild">
            <summary>
The LastChild property provides the last child NBElement in the logical (hierarchical) view of the message. 
</summary>
            <value>The element representing the last child of this element.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.FirstChild">
            <summary>
The FirstChild property provides the first child NBElement in the logical (hierarchical) view of the message. 
</summary>
            <value>The element representing the first child of this element.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.PreviousSibling">
            <summary>
The PreviousSibling property provides the previous sibling NBElement in the logical (hierarchical) view of the message. 
</summary>
            <value>The element representing the previous sibling (left sibling) of this element.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.NextSibling">
            <summary>
The NextSibling property provides the next sibling NBElement in the logical (hierarchical) view of the message.
</summary>
            <value>The element representing the next sibling (right sibling) of this element.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.Parent">
            <summary>
The Parent property provides the parent NBElement in the logical (hierarchical) view of the message.
</summary>
            <value>The element representing the parent of this element.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.ParserName">
            <summary>
The ParserName property provides the name of the Parser in the logical view of the message which owns the NBElement.
</summary>
            <value>Gets the name of the parser associated with the element.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.Valid">
            <summary>
The Valid property indicates whether the NBElement object points to an actual logical message, or not.
</summary>
            <remarks>
This property always returns true and is only included for future expansion.
</remarks>
            <value>True if it is a valid value, false otherwise.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.ReadOnly">
            <summary>
The ReadOnly property indicates whether changes can be made to the NBElement.
</summary>
            <value>Returns true if this element is part of a message that is read only.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.NBElementEnumerator.Reset">
            <summary>
The Reset method resets the state of the NBElementEnumerator to the beginning of the collection.
</summary>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.NBElementEnumerator.CurrentNonGenericElement">
            <summary>
The CurrentNonGenericElement property provides the current non-generic NBElement within an <see cref="T:IBM.Broker.Plugin.NBElement.NBElementEnumerator" />.
</summary>
            <value>CurrentNonGenericElement accesses the <see cref="T:System.Object" />.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBElement.NBElementEnumerator.CurrentGenericElement">
            <summary>
The CurrentGenericElement property provides the current generic NBElement within an <see cref="T:IBM.Broker.Plugin.NBElement.NBElementEnumerator" />.
</summary>
            <value>CurrentGenericElement accesses the NBElement.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.NBElementEnumerator.MoveNext">
            <summary>
The MoveNext method returns a boolean to signal whether a valid move of an NBElementEnumerator is possible.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.NBElementEnumerator.#ctor(IBM.Broker.Plugin.NBElement,System.String,System.String,System.Int32)">
            <summary>
Constructs a new object with the given element, its name, namespace and type. 
</summary>
            <param name="element">The currently unattached element to be added.</param>
            <param name="name">The name of the element.</param>
            <param name="space">The namespace of the elemnt.</param>
            <param name="type">Type of the element.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBElement.NBElementEnumerator.#ctor(IBM.Broker.Plugin.NBElement)">
            <summary>
The NBElementEnumerator class represents an enumerator for NBElements in the logical view of the message.
</summary>
            <param name="element">The currently unattached element to be added.</param>
        </member>
        <member name="T:IBM.Broker.Plugin.NBElement">
            <summary>
NBElement represents the elements in the logical (hierarchical)
view of the message. Methods are provided for navigating and modifying
the hierarchy.
</summary>
            <remarks>
When creating a new message from scratch, it is important that the <i>parser-owning</i>
folders (elements whose parent is the root element) are created using only the following
methods passing in the parser name as the argument:

<para><see cref="M:IBM.Broker.Plugin.NBElement.CreateLastChildUsingNewParser(System.String)" /></para><para><see cref="M:IBM.Broker.Plugin.NBElement.CreateFirstChildUsingNewParser(System.String)" /></para><para><see cref="M:IBM.Broker.Plugin.NBElement.CreateBeforeUsingNewParser(System.String)" /></para><para><see cref="M:IBM.Broker.Plugin.NBElement.CreateAfterUsingNewParser(System.String)" /></para><para>
Children of these folders should be created with the other create methods only.
</para><para><b>Warning:</b> caching <c>NBElement</c> objects over multiple message flow invocations is unsupported 
because the internal state may be reset at the end of the current message invocation. 
</para></remarks>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementGenericType.NameValue">
            <summary>
A name-value element is an optimization of the case where a name element contains only a value element and nothing else.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementGenericType.Value">
            <summary>
A value element has a value associated with it.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementGenericType.Name">
            <summary>
A name element has associated with it a string, which is the name of the element.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBElementGenericType">
            <summary>
The NBElementGenericType class represents the allowed generic types for all NBElements in the logical 
(hierarchical) view of the message.  These generic types specify whether the NBElement has a Name, a Value, or both.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBBitStreamControl">
            <summary>
The NBBitStreamControl enum represents the allowed control options which are used when parsing or writing
(between a bitstream and a structure in the logical view of the message).
</summary>
            <remarks>
Only one option from each of the groups 1 - 4 can be specified, with the exception of ValidateValue and ValidateContent, 
which can be used together to obtain the content and value validation. 
If you do not specify an option within a group, the option with the zero value from that group is used.
<para>
See the topic "Validation properties" in the Information Center (topic: ac18870) for more details.
</para></remarks>
        </member>
        <member name="F:IBM.Broker.Plugin.NBBitStreamControl.ValidateDeferred">
            <summary>
This option requests deferred validation.
<para>
This option belongs to <b>Group 4: Validation Timing Options</b>. 
</para></summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBBitStreamControl.ValidateImmediate">
            <summary>
This option requests immediate validation.
<para>
This option belongs to <b>Group 4: Validation Timing Options</b>. 
</para></summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBBitStreamControl.ValidateComplete">
            <summary>
This option requests complete validation.
<para>
This option belongs to <b>Group 4: Validation Timing Options</b>. 
</para></summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBBitStreamControl.ValidateUserTrace">
            <summary>
This option requests validation failures are logged to UserTrace.
<para>
This option belongs to <b>Group 3: Validation Failure Options</b>. 
</para></summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBBitStreamControl.ValidateLocalError">
            <summary>
This option requests validation failures are logged.
<para>
This option belongs to <b>Group 3: Validation Failure Options</b>. 
</para></summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBBitStreamControl.ValidateException">
            <summary>
This option requests validation failures are thrown as an exception.
<para>
This option belongs to <b>Group 3: Validation Failure Options</b>. 
</para></summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBBitStreamControl.ValidateExceptionList">
            <summary>
This option requests validation failures are sent to the ExceptionList.
<para>
This option belongs to <b>Group 3: Validation Failure Options</b>. 
</para></summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBBitStreamControl.ValidateNone">
            <summary>
This option requests no validation is performed.
<para>
This option belongs to <b>Group 2: Validation Options</b>. 
</para></summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBBitStreamControl.ValidateContent">
            <summary>
This option requests validation of the message content.
<para>
This option belongs to <b>Group 2: Validation Options</b>. 
</para></summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBBitStreamControl.ValidateValue">
            <summary>
This option requests validation of the message values.
<para>
This option belongs to <b>Group 2: Validation Options</b>. 
</para></summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBBitStreamControl.ValidateContentAndValue">
            <summary>
This option requests validation of the message content and values.
<para>
This option belongs to <b>Group 2: Validation Options</b>. 
</para></summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBBitStreamControl.EmbeddedBitStream">
            <summary>
This option requests parsing or serializing of a message with defaults for ccsid and encoding.
<para>
This option belongs to <b>Group 1: Bitstream Options</b>. 
</para></summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBBitStreamControl.FolderBitStream">
            <summary>
This option requests parsing or serializing of a message from the current element (folder).
<para>
This option belongs to <b>Group 1: Bitstream Options</b>. 
</para></summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBBitStreamControl.RootBitStream">
            <summary>
This option requests parsing or serializing of an entire message tree.
<para>
This option belongs to <b>Group 1: Bitstream Options</b>. 
</para></summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBElementDateTimeType">
            <summary>
The NBElementDateTimeType enum represents the allowed sub-types for NBElement values of type DateTime or DateTimeOffset.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementDateTimeType.GmtTimestamp">
            <summary>
The datatype is <c>GmtTimestamp</c>, which maps to the CLR type of <c>DateTime</c> or <c>Nullable&lt;DateTime&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementDateTimeType.Timestamp">
            <summary>
The datatype is <c>Timestamp</c>, which maps to the CLR type of <c>DateTimeOffset</c> or <c>Nullable&lt;DateTimeOffset&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementDateTimeType.Date">
            <summary>
The datatype is <c>Date</c>, which maps to the CLR type of <c>DateTimeOffset</c> or <c>Nullable&lt;DateTimeOffset&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementDateTimeType.Unknown">
            <summary>
The datatype is unknown
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBElementTimeSpanType">
            <summary>
The NBElementTimeSpanType enum represents the allowed sub-types for NBElement values of type TimeSpan.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementTimeSpanType.IntervalDaySecond">
            <summary>
The datatype is <c>IntervalDaySecond</c>, which maps to the CLR type of <c>TimeSpan</c> or <c>Nullable&lt;TimeSpan&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementTimeSpanType.GmtTime">
            <summary>
The datatype is <c>GmtTime</c>, which maps to the CLR type of <c>TimeSpan</c> or <c>Nullable&lt;TimeSpan&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementTimeSpanType.Time">
            <summary>
The datatype is <c>Time</c>, which maps to the CLR type of <c>TimeSpan</c> or <c>Nullable&lt;TimeSpan&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementTimeSpanType.Unknown">
            <summary>
The datatype is unknown
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.NBElementValueType">
            <summary>
The NBElementValueType enum represents the allowed broker data types for NBElement values in the logical (hierarchical) view of the message.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementValueType.Bit">
            <summary>
The datatype is <c>Bit</c>, which maps to the CLR type of <c>BitArray</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementValueType.Blob">
            <summary>
The datatype is <c>Blob</c>, which maps to the CLR type of <c>Byte[]</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementValueType.IntervalYearMonth">
            <summary>
The datatype is <c>IntervalYearMonth</c>, which does not currently have a datatype mapping.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementValueType.IntervalDaySecond">
            <summary>
The datatype is <c>IntervalDaySecond</c>, which maps to the CLR type of <c>TimeSpan</c> or <c>Nullable&lt;TimeSpan&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementValueType.GmtTimestamp">
            <summary>
The datatype is <c>GmtTimestamp</c>, which maps to the CLR type of <c>DateTime</c> or <c>Nullable&lt;DateTime&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementValueType.Timestamp">
            <summary>
The datatype is <c>Timestamp</c>, which maps to the CLR type of <c>DateTimeOffset</c> or <c>Nullable&lt;DateTimeOffset&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementValueType.Date">
            <summary>
The datatype is <c>Date</c>, which maps to the CLR type of <c>DateTimeOffset</c> or <c>Nullable&lt;DateTimeOffset&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementValueType.GmtTime">
            <summary>
The datatype is <c>GmtTime</c>, which maps to the CLR type of <c>TimeSpan</c> or <c>Nullable&lt;TimeSpan&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementValueType.Time">
            <summary>
The datatype is <c>Time</c>, which maps to the CLR type of <c>TimeSpan</c> or <c>Nullable&lt;TimeSpan&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementValueType.Character">
            <summary>
The datatype is <c>Character</c>, which maps to the CLR type of <c>String</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementValueType.Decimal">
            <summary>
The datatype is <c>Decimal</c>, which maps to the CLR type of <c>Decimal</c> or <c>Nullable&lt;Decimal&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementValueType.Float">
            <summary>
The datatype is <c>Float</c>, which maps to the CLR type of <c>Double</c> or <c>Nullable&lt;Double&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementValueType.Integer">
            <summary>
The datatype is <c>Integer</c>, which maps to the CLR type of <c>Int64</c> or <c>Nullable&lt;Int64&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementValueType.Boolean">
            <summary>
The datatype is <c>Boolean</c>, which maps to the CLR type of <c>Boolean</c> or <c>Nullable&lt;Boolean&gt;</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBElementValueType.Unknown">
            <summary>
The datatype is unknown
</summary>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBTimeoutPollingResult.NextCallInterval">
            <summary>
Returns the wait interval before the <c>ReadData</c> method is called again.
</summary>
            <remarks>
A TimeSpan of 0 is the default and means no wait is required.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBTimeoutPollingResult.BuildInputRecord">
            <summary>
Returns null for an <c>NBTimeoutPollingResult</c> as there is no record to build.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBTimeoutPollingResult.#ctor(IBM.Broker.Plugin.Connector.NBPollingInputConnector,System.TimeSpan)">
            <summary>
Initializes a new instance of the <see cref="T:IBM.Broker.Plugin.Connector.NBTimeoutPollingResult" /> class that causes a pause before <c>ReadData</c> is called again.
</summary>
            <remarks>
This constructor makes an <c>NBTimeoutPollingResult</c> that will introduce a defined wait before the <c>ReadData</c> is called again.
</remarks>
            <param name="connector">The owning connector.</param>
            <param name="nextCallInterval">The duration that will pass before <c>ReadData</c> is called again.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBTimeoutPollingResult.#ctor(IBM.Broker.Plugin.Connector.NBPollingInputConnector)">
            <summary>
Initializes a new instance of the <see cref="T:IBM.Broker.Plugin.Connector.NBTimeoutPollingResult" /> class with no further waiting required.
</summary>
            <remarks>
This constructor makes an <c>NBTimeoutPollingResult</c> that will cause the <c>ReadData</c> to be called again immediately.
</remarks>
            <param name="connector">The owning connector.</param>
        </member>
        <member name="T:IBM.Broker.Plugin.Connector.NBTimeoutPollingResult">
            <summary>
                <c>NBTimeoutPollingResult</c> is a class which is used to indicate the <c>ReadData</c> method has no data to return.
</summary>
            <remarks>
                <para>
A <c>NBTimeoutPollingResult</c> with the single argument constructor is returned when the <c>ReadData</c> method has 
already waited for data inside the method itself, so the system should call <c>ReadData</c> again immediately.
</para>
                <para>
A <c>NBTimeoutPollingResult</c> with the two argument constructor is returned when the <c>ReadData</c> method was 
not able to wait for data inside the method itself, so the system should call <c>ReadData</c> again after a delay of the 
given <c>nextCallInterval</c> duration.
</para>
                <para>
If required, a greater duration can be returned by the two argument constructor than the original <c>timeout</c> interval. 
This allows the implementation of a batch-oriented approach, where the ReadData method is only called, 
for example, once per hour or once per day. 
</para>
            </remarks>
        </member>
        <member name="F:IBM.Broker.Plugin.Connector.NBPollingResult.properties">
            <summary> 
The properties that will make up the LocalEnvironment
</summary>
            <remarks>
This is populated with an empty dictionary when <see cref="M:IBM.Broker.Plugin.Connector.NBPollingResult.BuildProperties" /> is called. It can also be populated by a subclass.
</remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBPollingResult.Connector">
            <summary> 
Returns the owning NBPollingInputConnector.
</summary>
            <value>The owning <c>NBPollingInputConnector</c>.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBPollingResult.LogResult">
            <summary> 
This is called by the broker after <c>ReadData</c> to allow the connector writer to do their own logging.
</summary>
            <remarks>
If it is not overridden then a standard activity log message is written.
Throwing an <c>Exception</c> will cause the message flow node to throw an exception for the message currently being processed.
</remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBPollingResult.ResultSource">
            <summary> 
This is called by the broker after a result is returned.
</summary>
            <remarks>
The information is used in log entries to tell the end user where the result originated from.
If it is not overridden then the connector name is used.
Throwing an <c>Exception</c> will cause an entry to be written to the Event Log and the result to be discarded.
</remarks>
            <value>The source of the result.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBPollingResult.MarkAsFailed">
            <summary>
This is called by the broker if the processing of the result fails with an error.
</summary>
            <remarks>
If an <c>Exception</c> is thrown then the error is written to the Event Log and the result is discarded.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBPollingResult.Confirm">
            <summary>
This is called by the broker if the processing of the result completes without error.
</summary>
            <remarks>
If an <c>Exception</c> is thrown then the error is written to the Event Log and the result is discarded.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBPollingResult.BuildProperties">
            <summary>
This is called by the broker to see if additional information found in the record is required. 
</summary>
            <remarks>
The returned properties are used to construct the local environment part of the message.
If an <c>Exception</c> is thrown, then the processing of the result will fail.
The keys and values in the returned dictionary will become Name or NameValue elements under the 
<c>DotNet.Input folder</c> in the LocalEnvironment. If the key has multiple parts, 
separated by “/” characters (such as "a/b/c") then a tree will be constructed for each element between the "/" characters.
</remarks>
            <returns>A dictionary of key values for adding data into the LocalEnvironment.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBPollingResult.BuildInputRecord">
            <summary>
This is called by the broker when the record representing the result is required.
</summary>
            <remarks>
The record is used to construct the message that is processed in the message flow.
If an <c>Exception</c> is thrown then the processing of the result will fail.
</remarks>
            <returns>The input record to be processed.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBPollingResult.#ctor(IBM.Broker.Plugin.Connector.NBPollingInputConnector)">
            <summary>
Initializes a new instance of the <see cref="T:IBM.Broker.Plugin.Connector.NBPollingResult" /> class.
</summary>
            <param name="connector">The owning connector.</param>
        </member>
        <member name="T:IBM.Broker.Plugin.Connector.NBPollingResult">
            <summary>
NBPollingResult is the base class for a polling result from the system.
</summary>
            <remarks>
                <para>
The connector writer implements and constructs <c>NBPollingResult</c> objects, which are returned to Integration Bus for processing
from the <c>NBPollingResult.ReadData</c> method.
</para>
                <para>
Integration Bus makes call backs to the <c>NBPollingResult</c> object during the processing of the result as follows:
<list type="bullet"><item><see cref="M:IBM.Broker.Plugin.Connector.NBPollingResult.LogResult">LogResult</see> is called when the <c>NBPollingResult</c> is about to be processed and needs to be logged to activity trace.</item><item><see cref="M:IBM.Broker.Plugin.Connector.NBPollingResult.BuildInputRecord">BuildInputRecord</see> is called when the record representing the <c>NBPollingResult</c> is required. The record is used to construct the message that is processed in the message flow.</item><item><see cref="M:IBM.Broker.Plugin.Connector.NBPollingResult.BuildProperties">BuildProperties</see> is called when extra details about the <c>NBPollingResult</c> are required which are not part of the data. These details are written out to the LocalEnvironment tree.</item><item><see cref="M:IBM.Broker.Plugin.Connector.NBPollingResult.Confirm">Confirm</see> is called if the processing of the result was successful.</item><item><see cref="M:IBM.Broker.Plugin.Connector.NBPollingResult.MarkAsFailed">MarkAsFailed</see> is called if the processing of the result failed.</item></list></para>
                <para>
The connector writer constructs <c>NBPollingResult</c> objects which are returned to Integration Bus from the <c>NBPollingInputConnector.ReadData</c> method.
</para>
            </remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBInputRecord.Connector">
            <summary>
Returns the <c>NBConnector</c> to which this record belongs.
</summary>
            <value>The NBConnector.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBInputRecord.Exception">
            <summary>
Allows an exception to be stored to be thrown later by the default implementation of <c>ValidateData</c>.
</summary>
            <remarks>
See <see cref="M:IBM.Broker.Plugin.Connector.NBInputRecord.ValidateData(IBM.Broker.Plugin.NBElement)" /></remarks>
            <value>The Exception.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBInputRecord.DestinationName">
            <summary>
This is called by the broker to decide where the message will be sent.
</summary>
            <remarks>
                <para>
Return the name of the terminal or label that the message will be propagated to. The string that is returned is compared to the available the terminals on the node. 
</para>
                <para>
If there is a match, that is where the message will be sent. If there is no match, then the string will be compared with the available labels and if there is a match then the message will be propagated to the corresponding Label node. 
</para>
                <para>
If no match is made then an exception is thrown and the message will be sent to the failure terminal. In addition, throwing an Exception will also cause the message will be sent to the failure terminal. 
</para>
                <para>
The default implementation will propagate the message to the 'Out' terminal. Returning an empty string means the message will not be propagated at all, and will be discarded. 
</para>
            </remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBInputRecord.ValidateData(IBM.Broker.Plugin.NBElement)">
            <summary>
This is called by the broker once the message tree has been constructed.
</summary>
            <remarks>
                <para>
Return '<c>Ok</c>' if the data is constructed correctly.
Return '<c>Consumed</c>' if the message must be discarded and not processed any further.
</para>
                <para>
The default implmentation will return '<c>Ok</c>' unless an <see cref="P:IBM.Broker.Plugin.Connector.NBInputRecord.Exception" /> was set on the record.
If an Exception was set on the record, then the Exception will be rethrown instead.
</para>
                <para>
Throwing an Exception will cause the message will be sent to the failure terminal.
</para>
                <para>
The Root element can be used to simply examine the message to be propagated or it can be used to construct the whole message
in its entirety.
</para>
            </remarks>
            <param name="root">The root element of the message to be propagated.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBInputRecord.#ctor(IBM.Broker.Plugin.Connector.NBInputConnector)">
            <summary>
Initializes a new instance of the <see cref="T:IBM.Broker.Plugin.Connector.NBInputRecord" /> class.
</summary>
            <param name="connector">The owning connector.</param>
        </member>
        <member name="T:IBM.Broker.Plugin.Connector.NBInputRecord">
            <summary>
                <c>NBInputRecord</c> is an abstract base class for records returned from <c>NBEvent.BuildInputRecord</c> or <c>NBPollingResult.BuildInputRecord</c>.
</summary>
            <remarks>
                <para>
A record represents a single message to be sent down a message flow.
</para>
            </remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.Connector.DataValidation">
            <summary>
Defines the allowable return values from <c>NBInputRecord.ValidateData</c>.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.Connector.DataValidation.Consumed">
            <summary>
The message is invalid and should be discarded.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.Connector.DataValidation.Ok">
            <summary>
The message is valid and should be propagated to the terminal or label returned from <c>DestinationName</c></summary>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBConnectorFactory.PollingInputConnectors">
            <summary>
Returns a collection of all <c>NBPollingInputConnector</c>s which have been created by this factory and have not been terminated. 
</summary>
            <value>All PollingInputConnectors.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBConnectorFactory.EventInputConnectors">
            <summary>
Returns a collection of all <c>NBEventInputConnector</c>s which have been created by this factory and have not been terminated. 
</summary>
            <value>All EventInputConnectors.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBConnectorFactory.InputConnectors">
            <summary>
Returns a collection of all <c>NBInputConnector</c>s which have been created by this factory and have not been terminated. 
</summary>
            <value>All InputConnectors.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBConnectorFactory.WorkDirectory">
            <summary>
The working directory of the container running the connectors. This can be used to store data by connectors owned by this factory.
The data stored is kept until the broker is deleted.
</summary>
            <value>The working directory.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBConnectorFactory.ContainerName">
            <summary>
The name of the container running the connectors.
</summary>
            <value>ContainerName.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBConnectorFactory.Properties">
            <summary>
Returns all properties for this connector factory.
</summary>
            <value>Factory Properties.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBConnectorFactory.Name">
            <summary>
Returns the name of the factory.
</summary>
            <value>Factory Name</value>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBConnectorFactory.Terminate">
            <summary>
This is called by the broker when the execution group is about to stop.
</summary>
            <remarks>
Throwing an exception will not prevent any flows being stopped.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBConnectorFactory.Finish">
            <summary>
This is called by the broker when the last connector using the factory is destroyed.
</summary>
            <remarks>
It signals that no new connectors will be created until after Start is called again.
Throwing an exception will not prevent any flows being stopped.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBConnectorFactory.CreateInputConnector(System.String,System.Collections.Generic.Dictionary`2{System.String,System.String})">
            <summary>
This is called by the broker when a connector to receive data from the system is required.
</summary>
            <param name="name">The name of the connector.</param>
            <param name="properties">TThe factory properties.</param>
            <returns>An NBInputConnector.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBConnectorFactory.Start">
            <summary>
This is called by the broker when the first usage of the factory is about to happen.
</summary>
            <remarks>
Normally, this will occur when the first node usong the connector is created.
Throwing an exception will fail the creation of the flow causing the start request. 
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBConnectorFactory.Initialize(System.String,System.Collections.Generic.Dictionary`2{System.String,System.String})">
            <summary>
This is called by the broker when a node using a connector is deployed.
</summary>
            <remarks>
Throwing an exception will stop the ConnectorFactory being available for use. 
</remarks>
            <param name="name">The name of the factory.</param>
            <param name="properties">The configuration properties of the factory.</param>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBConnectorFactory.Info">
            <summary>
This is called by the broker to get a information about the <c>NBConnectorFactory</c>.
</summary>
            <remarks>
It must return useful information about the Connector factory being used, such as its branded name and current version.
</remarks>
            <value>Information about this NBConnectorFactory.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBConnectorFactory.#ctor">
            <summary>
Initializes a new instance of the <see cref="T:IBM.Broker.Plugin.Connector.NBConnectorFactory" /> class.
</summary>
        </member>
        <member name="T:IBM.Broker.Plugin.Connector.NBConnectorFactory">
            <summary>
NBConnectorFactory is an abstract base class for connector factories.
</summary>
            <remarks>
                <para>
It is used by IBM Integration Bus to call the connector provider to change its state and request for particular types of connectors
to be created. It is currently only used by the system and should not be extended or subclassed by users.
</para>
            </remarks>
        </member>
        <member name="F:IBM.Broker.Plugin.Connector.NBEvent.properties">
            <summary> 
The properties that will make up the LocalEnvironment.
</summary>
            <remarks>
This is populated with an empty dictionary when <see cref="M:IBM.Broker.Plugin.Connector.NBEvent.BuildProperties" /> is called. It can also be populated by a subclass.
</remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBEvent.Connector">
            <summary> 
Returns the owning NBEventInputConnector.
</summary>
            <value>The owning <c>NBEventInputConnector</c>.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBEvent.LogEvent">
            <summary> 
This is called by the broker after <c>DeliverEvents</c> to allow the connector writer to do their own logging.
</summary>
            <remarks>
If it is not overridde then a standard activity log message is written.
Throwing an <c>Exception</c> will cause the message flow node to throw an exception for the messaging being currently processed.
</remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBEvent.EventSource">
            <summary> 
This is called by the broker after an event is received.
</summary>
            <remarks>
The information is used in log entries to tell the end user where the event originated from.
If it is not overridden then the connector name is used.
Throwing an <c>Exception</c> will cause an entry to be written to the Event Log and the event to be discarded.
</remarks>
            <value>The source of the result.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBEvent.MarkAsFailed">
            <summary>
This is called by the broker if the processing of the event fails with an error.
</summary>
            <remarks>
If an <c>Exception</c> is thrown then the error is written to the Event Log and the event is discarded.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBEvent.Confirm">
            <summary>
This is called by the broker if the processing of the event completes without error.
</summary>
            <remarks>
If an <c>Exception</c> is thrown then the error is written to the Event Log and the event is discarded.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBEvent.BuildProperties">
            <summary>
This is called by the broker when the additional information on found in the record is required. 
</summary>
            <remarks>
The returned properties is used to construct the local environment part of the message.
If an <c>Exception</c> is thrown then the processing of the result will fail.
The keys and values in the returned dictionary will become Name or NameValue elements under the 
<c>DotNet.Input folder</c> in the LocalEnvironment. If the key has multiple parts, 
separated by “/” characters (such as "a/b/c") then a tree will be constructed for each element between the "/" characters.
</remarks>
            <returns>A dictionary of key values for adding data into the LocalEnvironment.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBEvent.BuildInputRecord">
            <summary>
This is called by the broker when the record representing the Event is required. 
</summary>
            <remarks>
The record is used to construct the message that is processed in the message flow.
If an <c>Exception</c> is thrown then the processing of the event will fail.
</remarks>
            <returns>The input record to be processed.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBEvent.#ctor(IBM.Broker.Plugin.Connector.NBEventInputConnector)">
            <summary>
Initializes a new instance of the <see cref="T:IBM.Broker.Plugin.Connector.NBEvent" /> class.
</summary>
            <param name="connector">The owning connector.</param>
        </member>
        <member name="T:IBM.Broker.Plugin.Connector.NBEvent">
            <summary>
NBEvent is a base class which must be extended to be able to receive an event from the system.
</summary>
            <remarks>
                <para>
The connector writer implements and constructs <c>NBEvent</c> objects, which are delivered to Integration Bus for processing
by calling the <c>DeliverEvents</c> method on the writers <c>NBEventInputConnector</c>.
</para>
                <para>
Integration Bus makes calls backs to the <c>NBEvent</c> object during the processing of the Event as follows:
<list type="bullet"><item><see cref="M:IBM.Broker.Plugin.Connector.NBEvent.LogEvent" /> is called when the <c>NBEvent</c> is about to be processed and needs to be logged to activity trace.</item><item><see cref="M:IBM.Broker.Plugin.Connector.NBEvent.BuildInputRecord" /> is called when the record representing the <c>NBEvent</c> is required. The record is used to construct the message that is processed in the message flow.</item><item><see cref="M:IBM.Broker.Plugin.Connector.NBEvent.BuildProperties" /> is called when extra details about the <c>NBEvent</c> are required which are not part of the data. These details are written out to the LocalEnvironment tree.</item><item><see cref="M:IBM.Broker.Plugin.Connector.NBEvent.Confirm" /> is called if the processing of the event was successful.</item><item><see cref="M:IBM.Broker.Plugin.Connector.NBEvent.MarkAsFailed" /> is called if the processing of the event failed.</item></list></para>
                <para>
The connector writer constructs <c>NBEvent</c> objects which are delivered to Integration Bus by calling the <c>DeliverEvent</c> or <c>DeliverEvents</c> methods.
A default implementation, <c>NBByteArrayInputEvent</c> is provided to simplify the handling of byte arrays.
</para>
            </remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBEventInputConnector.DeliverEvents(IBM.Broker.Plugin.Connector.NBEvent[])">
            <summary>
Used to deliver <see cref="T:IBM.Broker.Plugin.Connector.NBEvent" />s to be processed by the broker.
</summary>
            <remarks>
The method returns as soon as the events have been successfully delivered to the node, but before the events are processed within the message flow.
Each event in the array is processed individually.
</remarks>
            <param name="events">An array of events to be delivered.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBEventInputConnector.DeliverEvent(IBM.Broker.Plugin.Connector.NBEvent)">
            <summary>
Used to deliver a single <see cref="T:IBM.Broker.Plugin.Connector.NBEvent" /> to be processed by the broker.
</summary>
            <remarks>
The method returns as soon as the event has been successfully delivered to the node, but before the event is processed within the message flow.
</remarks>
            <param name="theEvent">The event to be delivered.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBEventInputConnector.LogNoEvent">
            <summary>
This is called by the broker when no events have been received for a while.
</summary>
            <remarks>
If it is not overridden then a standard activity log message is written stating it is waiting for data.
Throwing an exception will cause no activity log message to be written out.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBEventInputConnector.#ctor(IBM.Broker.Plugin.Connector.NBConnectorFactory,System.String,System.Collections.Generic.Dictionary`2{System.String,System.String})">
            <summary>
Initializes a new instance of the <see cref="T:IBM.Broker.Plugin.Connector.NBEventInputConnector" /> class.
</summary>
            <param name="connectorFactory">The owning factory.</param>
            <param name="name">The name of the connector.</param>
            <param name="properties">Contains any user properties placed on the node using this connector.</param>
        </member>
        <member name="T:IBM.Broker.Plugin.Connector.NBEventInputConnector">
            <summary>
                <c>NBEventInputConnector</c> is the base class which must be extended to implement a connector which can receive events from the system.
</summary>
            <remarks>
                <para>
It is used by IBM Integration Bus to listen and wait for events from a system. 
</para>
                <para>
The <c>NBEventInputConnector</c> is constructed when a node requiring its function is constructed (for example: a DotNetInputNode). The following methods are called by 
Integration Bus to interact with the connector:
<list type="bullet"><item><see cref="M:IBM.Broker.Plugin.Connector.NBConnector.Initialize" /> is called when a node using the connector is constructed.</item><item><see cref="M:IBM.Broker.Plugin.Connector.NBInputConnector.Start" /> is called when a node using the connector is ready to receive data.</item><item><see cref="M:IBM.Broker.Plugin.Connector.NBInputConnector.Finish" /> is called when a node using the connector is no longer ready to receive data.</item><item><see cref="M:IBM.Broker.Plugin.Connector.NBConnector.Terminate" /> is called when the node is stopped or destroyed.</item></list></para>
                <para>
The connector writer constructs <see cref="T:IBM.Broker.Plugin.Connector.NBEvent" /> objects which are delivered to Integration Bus by calling the <see cref="M:IBM.Broker.Plugin.Connector.NBEventInputConnector.DeliverEvents(IBM.Broker.Plugin.Connector.NBEvent[])" /> method.
</para>
            </remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBInputConnector.Started">
            <summary>
Started reports the running state of the connector. It is always set to true before <c>Start</c> is called and set to false before <c>Finish</c> is called.
</summary>
            <remarks>
Throwing an <c>Exception</c> from either <c>Finish</c> or <c>Start</c> does not affect the running state of the connector.
</remarks>
            <value>Returns the running state of the connector. <c>True</c> means connector is running and should collect data. <c>False</c> means connector is stopped and should stop collecting data.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBInputConnector.Finish">
            <summary>
Finish is called when the node using the connector no longer wants to receive data.
</summary>
            <remarks>
If an <c>Exception</c> is thrown then the error is reported to the Event Log and the connector goes into a stopped state. Finish is not called again until after another Start has been called.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBInputConnector.Start">
            <summary>
Start is called when the node using the connector is ready to start receiving data.
</summary>
            <remarks>
                <para>
Any initializition of connections to the end system should be done at this step.
</para>
                <para>
If an <c>Exception</c> is thrown then the error is reported to the Event Log and start is called again after a short wait.
</para>
            </remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBInputConnector.#ctor(IBM.Broker.Plugin.Connector.NBConnectorFactory,System.String,System.Collections.Generic.Dictionary`2{System.String,System.String})">
            <summary>
Constructor that must be used to create NBInputConnector objects.
</summary>
            <param name="name">The name given to the connector based on the flow and node name.</param>
            <param name="properties">The node and flow properties used to construct this connector.</param>
            <param name="connectorFactory">The connector factory constructing this connector.</param>
        </member>
        <member name="T:IBM.Broker.Plugin.Connector.NBInputConnector">
            <summary>
                <c>NBInputConnector</c> is an abstract base class which should not be extended by the user, but is extended by the system.
</summary>
            <remarks>
                <para>
It is used by IBM Integration Bus to listen and wait for data from a system. 
</para>
            </remarks>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBConnector.Name">
            <summary>
Returns the name of the connector.
</summary>
            <value>The Connector Name.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBConnector.Properties">
            <summary>
Returns the configuration properties that this connector has. Changing the returned properties has no effect.
</summary>
            <value>The Connector Properties.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBConnector.WriteActivityLog(System.String,IBM.Broker.Plugin.NBSeverity,System.Collections.Generic.Dictionary`2{System.String,System.String})">
            <summary>
Writes an entry to activity log using the context that this connector is being run in.
</summary>
            <remarks>
This method writes the contents of <c>message</c> as an insert into one of three built in messages:
<para>
For <c>Information</c> severities it uses a message numbered 12068.
</para><para>
For <c>Warning</c> severities it uses a message numbered 12069.
</para><para>
For <c>Error</c> severities it uses a message numbered 12070.
</para></remarks>
            <param name="message">The message sent to the activity log.</param>
            <param name="severity">The severity of the message.</param>
            <param name="extraTags">A <c>Dictionary</c> of names and values which will be used to tag this log message.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBConnector.WriteActivityLog(System.String,System.Collections.Generic.Dictionary`2{System.String,System.String})">
            <summary>
Writes an entry to activity log using the context that this connector is being run in.
</summary>
            <remarks>
This method writes the contents of <c>message</c> as an insert into the built in Informational message numbered 12068.
</remarks>
            <param name="message">The message sent to the activity log.</param>
            <param name="extraTags">A <c>Dictionary</c> of names and values which will be used to tag this log message.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBConnector.WriteActivityLog(System.String,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Writes an entry to activity log using the context that this connector is being run in.
</summary>
            <remarks>
This method writes the contents of <c>message</c> as an insert into one of three built in messages:
<para>
For <c>Information</c> severities it uses a message numbered 12068.
</para><para>
For <c>Warning</c> severities it uses a message numbered 12069.
</para><para>
For <c>Error</c> severities it uses a message numbered 12070.
</para></remarks>
            <param name="message">The message sent to the activity log.</param>
            <param name="severity">The severity of the message.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBConnector.WriteActivityLog(System.String)">
            <summary>
Writes an entry to activity log using the context that this connector is being run in.
</summary>
            <remarks>
This method writes the contents of <c>message</c> as an insert into the built in Informational message numbered 12068
</remarks>
            <param name="message">The message sent to the activity log.</param>
        </member>
        <member name="P:IBM.Broker.Plugin.Connector.NBConnector.ConnectorFactory">
            <summary>
Returns the ConnectionFactory that created this connector.
</summary>
            <value>The Connector Factory.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBConnector.Terminate">
            <summary>
This is called by the broker when the node using the connector is being stopped or deleted.
</summary>
            <remarks>
Throwing an exception will cause an error to be written to the Event Log but will not prevent the flow being stopped.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBConnector.Initialize">
            <summary>
This is called by the broker when a node using this connector is started.
</summary>
            <remarks>
Throwing an exception will cause the message flow being deployed or started to fail.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.Connector.NBConnector.#ctor(IBM.Broker.Plugin.Connector.NBConnectorFactory,System.String,System.Collections.Generic.Dictionary`2{System.String,System.String})">
            <summary>
Initializes a new instance of the <see cref="T:IBM.Broker.Plugin.Connector.NBConnector" /> class.
</summary>
            <param name="connectorFactory">The owning factory.</param>
            <param name="name">The name of the connector.</param>
            <param name="properties">Contains any user properties placed on the node using this connector, and any flow level UDPs.</param>
            <remarks>A property set on the node will override a property of the same name set on the flow.</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.Connector.NBConnector">
            <summary>
An abstract base class that represents a connector.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBClrException.GetSerializedException">
            <summary>
GetSerializedException returns the Serialized Exception Object carried within the NBClrException.
</summary>
            <returns>The exception object.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBClrException.ThrowThis">
            <summary>
Instructs this object to throw itself.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBClrException.AddNestedException(IBM.Broker.Plugin.NBException)">
            <summary>
The AddNestedException method should not be called for <c>NBClrException</c>'s 
</summary>
            <remarks>
                <c>NBClrException</c>'s cannot have nested exceptions and so this method throws an exception if called.
</remarks>
            <param name="childException">The child of this exception in the hierarchy.</param>
            <exception cref="T:System.NotSupportedException">Thrown if this method is called.</exception>
        </member>
        <member name="T:IBM.Broker.Plugin.NBClrException">
            <summary>
NBClrException represents a class that wraps a System::Exception or a subclass of a System::Exception.
</summary>
            <remarks>
NBClrException is used to carry a System::Exception through the broker as a serialized object.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.ThrowThis">
            <summary>
Instructs this object to throw itself.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, object's catalog, exception number, the severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, object's catalog, exception number, the severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message, the object's catalog and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The exception inserts.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the exception's message, exception number, the severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, inner exception and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.Object[])">
            <summary>
Constructs a new exception object with the given message and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception)">
            <summary>
Constructs a new exception object with the exception's message, exception number, the severity and the inner exception.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Constructs a new exception object with the given message, exception number and the severity.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number and the inner exception.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error' and the number is assumed to be in the broker catalog.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object with the given message and inner exception and the defaulted message number 7499. 
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor(System.String)">
            <summary>
Constructs a new exception object with the given message and the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketTimeoutException.#ctor">
            <summary>
Constructs a new exception object with the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
This constructor initializes the Message property of the new instance to a system-supplied message that describes the error.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBSocketTimeoutException">
            <summary>
NBSocketTimeoutException represents a Socket timeout exception.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.ThrowThis">
            <summary>
Instructs this object to throw itself.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, object's catalog, exception number, the severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, object's catalog, exception number, the severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message, the object's catalog and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The exception inserts.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, inner exception and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.Object[])">
            <summary>
Constructs a new exception object with the given message and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number, the severity and the inner exception.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Constructs a new exception object with the given message, exception number and the severity.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number and the inner exception.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error' and the number is assumed to be in the broker catalog.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object with the given message and inner exception and the defaulted message number 7499. 
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor(System.String)">
            <summary>
Constructs a new exception object with the given message and the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSocketException.#ctor">
            <summary>
Constructs a new exception object with the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
This constructor initializes the Message property of the new instance to a system-supplied message that describes the error.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBSocketException">
            <summary>
NBSocketException represents a Socket exception.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.AddEsqlHandlerInserts(System.Int32,System.String)">
            <summary>
AddEsqlHandlerInserts adds information to the exception that allows an ESQL HANDLER to easily handle this exception by the specified sql code.
This method constructs ESQL Handler ready inserts with the specified SQL code and state.
</summary>
            <param name="sqlCode">The SQL code.</param>
            <param name="sqlState">The SQL state.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.ThrowThis">
            <summary>
Instructs this object to throw itself.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, object's catalog, exception number, the severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, object's catalog, exception number, the severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The Event insert.s</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message, the object's catalog and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, inner exception and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.Object[])">
            <summary>
Constructs a new exception object with the given message and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number, the severity and the inner exception.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Constructs a new exception object with the given message, exception number and the severity.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number and the inner exception.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error' and the number is assumed to be in the broker catalog.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object with the given message and inner exception and the defaulted message number 7499. 
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor(System.String)">
            <summary>
Constructs a new exception object with the given message and the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSqlException.#ctor">
            <summary>
Constructs a new exception object with the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
This constructor initializes the Message property of the new instance to a system-supplied message that describes the error.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBSqlException">
            <summary>
NBSqlException represents an SQL exception.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.AddEsqlHandlerInserts(System.Int32,System.String,System.Int32,System.String)">
            <summary>
AddEsqlHandlerInserts adds information to the exception that allows an ESQL HANDLER to easily handle this exception by the specified sql code.
This method constructs ESQL Handler ready inserts with the SQL code, state, native error and error text.
</summary>
            <param name="sqlCode">The SQL code.</param>
            <param name="sqlState">The SQL state.</param>
            <param name="sqlNativeError">The SQL Native error.</param>
            <param name="sqlErrorText">The SQL Error text.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.ThrowThis">
            <summary>
Instructs this object to throw itself.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, object's catalog, exception number, the severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The Exception number</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, object's catalog, exception number, the severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message, the object's catalog and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The Exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, inner exception and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.Object[])">
            <summary>
Constructs a new exception object with the given message and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number, the severity and the inner exception.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Constructs a new exception object with the given message, exception number and the severity.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number and the inner exception.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error' and the number is assumed to be in the broker catalog.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object with the given message and inner exception and the defaulted message number 7499. 
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor(System.String)">
            <summary>
Constructs a new exception object with the given message and the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBMessageException.#ctor">
            <summary>
Constructs a new exception object with the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
This constructor initializes the Message property of the new instance to a system-supplied message that describes the error.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBMessageException">
            <summary>
NBMessageException represents a message exception.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.AddEsqlHandlerInserts(System.Int32,System.String,System.Int32,System.String)">
            <summary>
AddEsqlHandlerInserts adds information to the exception that allows an ESQL HANDLER to easily handle this exception by the specified sql code.
This method constructs ESQL Handler ready inserts with the SQL code, state, native error and error text.
</summary>
            <param name="sqlCode">The SQLCode integer value.</param>
            <param name="sqlState">The SQLState string.</param>
            <param name="sqlNativeError">The SQLNativeError integer value.</param>
            <param name="sqlErrorText">The SQLErrorText string.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.ThrowThis">
            <summary>
Instructs this object to throw itself.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message, the object's catalog and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The Event insert.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, inner exception and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.Object[])">
            <summary>
Constructs a new exception object with the given message and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number, severity and the inner exception.
</summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Constructs a new exception object with the given message, exception number and the severity.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number and the inner exception.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error' and the number is assumed to be in the broker catalog.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The Exception numbe.r</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object with the given message and inner exception and the defaulted message number 7499. 
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor(System.String)">
            <summary>
Constructs a new exception object with the given message and the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBCastException.#ctor">
            <summary>
Constructs a new exception object with the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
This constructor initializes the Message property of the new instance to a system-supplied message that describes the error.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBCastException">
            <summary>
NBCastException represents the failure of the broker to cast an element's value to a specified type.
</summary>
            <remarks>
This could be generated by a failed cast in ESQL or a failed NBElementConvert operation.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.AddEsqlHandlerInserts(System.Int32,System.String,System.Int32,System.String)">
            <summary>
AddEsqlHandlerInserts adds information to the exception that allows an ESQL HANDLER to easily handle this exception by the specified sql code.
This method constructs ESQL Handler ready inserts with the SQL code, state, native error and error text.
</summary>
            <param name="sqlCode">The SQLCode integer value.</param>
            <param name="sqlState">The SQLState string.</param>
            <param name="sqlNativeError">The SQLNativeError integer value.</param>
            <param name="sqlErrorText">The SQLErrorText string.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.ThrowThis">
            <summary>
Instructs this object to throw itself.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message, the object's catalog and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, inner exception and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.Object[])">
            <summary>
Constructs a new exception object with the given message and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number, severity and the inner exception.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Constructs a new exception object with the given message, exception number and the severity.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number and the inner exception.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error' and the number is assumed to be in the broker catalog.
</remarks>
            <param name="message">The message.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object with the given message and inner exception and the defaulted message number 7499. 
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor(System.String)">
            <summary>
Constructs a new exception object with the given message and the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBUserException.#ctor">
            <summary>
Constructs a new exception object with the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
This constructor initializes the Message property of the new instance to a system-supplied message that describes the error.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBUserException">
            <summary>
NBUserException represents a user thrown exception.
</summary>
            <remarks>
                <para>
These are generated when a by user coode, such as a Throw node, ESQL's Throw statement or by the throwing of an NBUserException directly.
</para>
                <para>
There are three ranges of messages available for use by users of NBUserException's:
<list type="definition"><item><term>7510 - 7519</term><description>Message numbers 7510 - 7519 are Informational messages. Message 7510 contains 0 inserts, 7511 contains 1 inserts, etc.</description></item><item><term>7520 - 7529</term><description>Message numbers 7520 - 7529 are Warning messages. Message 7520 contains 0 inserts, 7521 contains 1 inserts, etc.</description></item><item><term>7530 - 7539</term><description>Message numbers 7530 - 7539 are Error messages. Message 7530 contains 0 inserts, 7531 contains 1 inserts, etc.</description></item></list></para>
            </remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.AddEsqlHandlerInsertsInner(System.String,System.Int32,System.String)">
            <summary>
AddEsqlHandlerInserts adds information to the exception that allows an ESQL HANDLER to catch this exception by the specified SQLCode.
Constructs ESQL Handler Inserts with the SQL state, native Error and Error text.
</summary>
            <remarks>
NBDatabaseException exceptions that are thrown to be handled by ESQL must be constructed in a particular format. There
must be an outer "root" exception that contains the sqlcode, and then an InnerException that contains the sql state, native error
and error text. This method should be called on the InnerException.
</remarks>
            <param name="sqlState">The SQLState string.</param>
            <param name="sqlNativeError">The SQLNativeError integer value.</param>
            <param name="sqlErrorText">The SQLErrorText string.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.AddEsqlHandlerInserts(System.Int32)">
            <summary>
AddEsqlHandlerInserts add an SQL code that allows an ESQL HANDLER that catches this exception to query the SQL code.
</summary>
            <remarks>
NBDatabaseException exceptions that are thrown to be handled by ESQL must be constructed in a particular format. There
must be an outer "root" exception that contains the sqlcode, and then an InnerException that contains the sql state, native error
and error text. This method should be called on the outer "root" exception.
</remarks>
            <param name="sqlCode">The SQLCode integer value.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.ThrowThis">
            <summary>
Instructs this object to throw itself.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message, the object's catalog and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, inner exception and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.Object[])">
            <summary>
Constructs a new exception object with the given message and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number, severity and the inner exception.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Constructs a new exception object with the given message, exception number and the severity.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number and the inner exception.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error' and the number is assumed to be in the broker catalog.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object with the given message and inner exception and the defaulted message number 7499. 
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor(System.String)">
            <summary>
Constructs a new exception object with the given message and the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBDatabaseException.#ctor">
            <summary>
Constructs a new exception object with the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
This constructor initializes the Message property of the new instance to a system-supplied message that describes the error.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBDatabaseException">
            <summary>
An NBDatabaseException is generated when a database management system reports an error during broker operation. 
A database exception is treated as a recoverable exception by the broker. 
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.ThrowThis">
            <summary>
Instructs this object to throw itself.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message, the object's catalog and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The Exception numbe.r</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, inner exception and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.Object[])">
            <summary>
Constructs a new exception object with the given message and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>&gt;
<param name="inserts">The exception inserts.</param></member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number, severity and the inner exception.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Constructs a new exception object with the given message, exception number and the severity.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number and the inner exception.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error' and the number is assumed to be in the broker catalog.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object with the given message and inner exception and the defaulted message number 7499. 
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor(System.String)">
            <summary>
Constructs a new exception object with the given message and the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConversionException.#ctor">
            <summary>
Constructs a new exception object with the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
This constructor initializes the Message property of the new instance to a system-supplied message that describes the error.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBConversionException">
            <summary>
An NBConversionException is generated by the broker character conversion functions 
if invalid data is found when attempting to convert to another datatype. A conversion
exception is treated as a recoverable exception by the broker. 
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.ThrowThis">
            <summary>
Instructs this object to throw itself.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The Exception number</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The Event inserts</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog of the objec.t</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message, the object's catalog and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, inner exception and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.Object[])">
            <summary>
Constructs a new exception object with the given message and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number, severity and the inner exception.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Constructs a new exception object with the given message, exception number and the severity.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number and the inner exception.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error' and the number is assumed to be in the broker catalog.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object with the given message and inner exception and the defaulted message number 7499. 
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor(System.String)">
            <summary>
Constructs a new exception object with the given message and the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBParserException.#ctor">
            <summary>
Constructs a new exception object with the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
This constructor initializes the Message property of the new instance to a system-supplied message that describes the error.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBParserException">
            <summary>
An NBParserException is generated by message parsers for errors which prevent the parsing of the message
content or creating a bit-stream. A parser exception is treated as a recoverable exception by the broker. 
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.ThrowThis">
            <summary>
Instructs this object to throw itself.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message, the object's catalog and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, inner exception and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.Object[])">
            <summary>
Constructs a new exception object with the given message and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number, severity and the inner exception.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Constructs a new exception object with the given message, exception number and the severity.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number and the inner exception.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error' and the number is assumed to be in the broker catalog.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The Exception number</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object with the given message and inner exception and the defaulted message number 7499. 
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor(System.String)">
            <summary>
Constructs a new exception object with the given message and the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBConfigurationException.#ctor">
            <summary>
Constructs a new exception object with the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
This constructor initializes the Message property of the new instance to a system-supplied message that describes the error.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBConfigurationException">
            <summary>
An NBConfigurationException is generated when a configuration request fails. 
</summary>
            <remarks>
The configuration request can fail because of an error in the format of the configuration request, or an error in the data. 
When a configuration exception is thrown, the request is rejected and an error response message is returned. This type of 
exception can be thrown from the OnInitialize() method or the default constructor of a node.
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.ThrowThis">
            <summary>
Instructs this object to throw itself.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message, the object's catalog and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Recording the exception's message, exception number, the severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, inner exception and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.Object[])">
            <summary>
Constructs a new exception object with the given message and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number, severity and the inner exception.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Constructs a new exception object with the given message, exception number and severity.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number and the inner exception.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error' and the number is assumed to be in the broker catalog.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object with the given message and inner exception and the defaulted message number 7499. 
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor(System.String)">
            <summary>
Constructs a new exception object with the given message and the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBRecoverableException.#ctor">
            <summary>
Constructs a new exception object with the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
This constructor initializes the Message property of the new instance to a system-supplied message that describes the error.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBRecoverableException">
            <summary>
NBRecoverableException represents errors which, although not   
terminal in nature, mean that the processing of the current message
flow has to be ended. 
</summary>
            <remarks>
Examples of recoverable exceptions are invalid data
in the content of a message, or a failure to write a message to an output node.
<para>
Many methods in the Plugin API will throw NBRecoverableException's. This type of exception is
safe to catch in user code and can be handled by user code without having to rethrow the exception
back to the broker. Therefore, NBRecoverableException would be the usual type to place in a catch block around
Plugin API calls.
</para></remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.ThrowThis">
            <summary>
Instructs this object to throw itself.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message, the object's catalog and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains the message number.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The Exception number</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, inner exception and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.Object[])">
            <summary>
Constructs a new exception object with the given message and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number, severity and the inner exception.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Constructs a new exception object with the given message, exception number and the severity.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number and the inner exception.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error' and the number is assumed to be in the broker catalog.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object with the given message and inner exception and the defaulted message number 7499. 
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor(System.String)">
            <summary>
Constructs a new exception object with the given message and the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBSecurityException.#ctor">
            <summary>
Constructs a new exception object with the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
This constructor initializes the Message property of the new instance to a system-supplied message that describes the error.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBSecurityException">
            <summary>
NBSecurityException represents a security error occuring within the broker.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.ThrowThis">
            <summary>
Instructs this object to throw itself.
</summary>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, the severity and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number, inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, the object's catalog, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message, the object's catalog and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="catalog">The catalog that contains message number.</param>
            <param name="number">The exception number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the severity, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the inner exception and the object's inserts.
</summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.Int64,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number, the inner exception and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.Int64,System.Object[])">
            <summary>
Constructs a new exception object with the given message, exception number and inserts.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
Constructs a new exception object with the given message, inner exception and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.Object[])">
            <summary>
Constructs a new exception object with the given message and inserts and the defaulted message number 7498.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7498 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inserts">The exception inserts.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number, severity and inner exception.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.Int64,IBM.Broker.Plugin.NBSeverity)">
            <summary>
Constructs a new exception object with the given message, exception number and severity.
</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
Constructs a new exception object with the given message, exception number and inner exception.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The exception number.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.Int64)">
            <summary>
Constructs a new exception object with the given message and exception number.
</summary>
            <remarks> 
In this constructor the severity is defaulted to 'Error' and the number is assumed to be in the broker catalog.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="number">The message number.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object with the given message and inner exception and the defaulted message number 7499. 
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">An instance of Exception that describes the error that caused the current exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor(System.String)">
            <summary>
Constructs a new exception object with the given message and the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog and the severity is defaulted to 'Error'.
</remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:IBM.Broker.Plugin.NBFatalException.#ctor">
            <summary>
Constructs a new exception object with the defaulted message number 7499.
</summary>
            <remarks> 
In this constructor message number is defaulted to 7499 from the Integration Bus catalog, the severity is defaulted to 'Error'.
This constructor initializes the Message property of the new instance to a system-supplied message that describes the error.
</remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBFatalException">
            <summary>
NBFatalException represents a severe error condition that prevents the broker process
from continuing execution safely, or where it is broker policy to terminate the process.
</summary>
            <remarks> 
Examples of fatal exceptions are a failure to acquire a critical system resource, or an 
internally caught severe software error. The broker process will terminate after a fatal exception is thrown. 
<para><c>NBFatalException</c>'s may be thrown if the node detects that a condition that requires the broker process
should be terminated and restarted, but they should not be caught by user code.
</para></remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBBrokerException.AddNestedException(IBM.Broker.Plugin.NBException)">
            <summary>
The AddNestedException method should not be called for <c>NBClrException</c>'s 
</summary>
            <param name="childException">The child of this exception in the hierarchy.</param>
            <remarks>
                <c>NBClrException</c>'s cannot have nested exceptions and so this method throws an exception if called.
</remarks>
            <exception cref="T:System.NotSupportedException">Thrown if this method is called.</exception>
        </member>
        <member name="T:IBM.Broker.Plugin.NBBrokerException">
            <summary>
                <c>NBBrokerException</c> represents an exception that wraps other exceptions thrown from the Propagate methods.
</summary>
            <remarks>
                <c>NBBrokerExceptions</c> are thrown by the Propagate methods which wrap exceptions thrown by nodes downstream of the current node in the flow.
Normal <c>NBBrokerExceptions</c> are not caught and will be passed back to the broker. 
However, if they are caught by user code they must be rethrown to the broker 
for additional error recovery to be performed. 
</remarks>
        </member>
        <member name="M:IBM.Broker.Plugin.NBException.FormattedMessage(System.Boolean)">
            <summary>
Formats the exception as a string using the catalog provided in the exception itself.
</summary>
            <remarks>
Inserts present in the exception can be added if desired. Inserts that are null are represented by empty strings.
Note that any tabs or newlines present in the formatted message are removed before the string is returned.
</remarks>
            <param name="ignoreInserts">If true then inserts from the exception are not added into the formatted message.</param>
            <returns>String containing the formatted message, but null is returned if the message cannot be found in the catalog or the catalog cannot be found.</returns>
            <exception cref="T:System.Security.SecurityException">Thrown if the registry cannot be accessed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the catalog entry in the registry cannot be accessed.</exception>
        </member>
        <member name="M:IBM.Broker.Plugin.NBException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Initializes a new instance of the Exception class with serialized data.
</summary>
            <param name="info">Holds the serialized object data about the exception being thrown. </param>
            <param name="context">Contains contextual information about the source or destination. </param>
        </member>
        <member name="P:IBM.Broker.Plugin.NBException.StackTrace">
            <summary>
Gets a string representation of the immediate frames on the call stack.
</summary>
            <value>StackTrace is a string that describes the immediate frames of the call stack.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBException.Data">
            <summary>
Gets a collection of key/value pairs that provide additional user-defined information about the exception.
</summary>
            <value>Data is object that contains a collection of user-defined key/value pairs. The default is an empty collection.</value>
        </member>
        <member name="M:IBM.Broker.Plugin.NBException.GetNestedExceptions">
            <summary>
Gets all the nested exceptions that belong to the current exception.
</summary>
            <returns>The Nested exceptions.</returns>
        </member>
        <member name="M:IBM.Broker.Plugin.NBException.AddNestedException(IBM.Broker.Plugin.NBException)">
            <summary>
Adds a nested exception to the current exception.
</summary>
            <remarks>
Adds an exception to the list of exception objects representing the children of
this exception in the hierarchy (exception list). Each element should be of the 
correct exception type (e.g. NBDatabaseException for a database error). 
</remarks>
            <param name="childException">The childException will become a child of this exception in the exceptionList hierarchy.</param>
        </member>
        <member name="P:IBM.Broker.Plugin.NBException.StackTraceAsLastInsert">
            <summary>
Gets or sets a flag to request that the exception, when logged, contains the StackTrace as its last insert.
</summary>
            <remarks>
This property defaults to true for messages thrown by a plugin developer.
</remarks>
            <value>StackTraceAsLastInsert requests that the exception is to be logged with the StackTrace as the last insert.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBException.MessageAsFirstInsert">
            <summary>
Gets or sets a flag to request that the exception, when logged, contains the Message as the first insert.
</summary>
            <remarks>
This property defaults to true for messages thrown by a plugin developer.
</remarks>
            <value>MessageAsFirstInsert requests that the exception to be logged with the Message as the first insert.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBException.Number">
            <summary>
Gets or sets the Error number.
</summary>
            <value>Error number of the exception.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBException.Severity">
            <summary>
Gets or sets the severity of the exception.
</summary>
            <value>Severity of the exception.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBException.Catalog">
            <summary>
Gets or sets The catalog that contains the exception message number.
</summary>
            <value>Catalog name.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBException.Label">
            <summary>
Gets or sets the label of the component or class that originated the exception. 
</summary>
            <value>Label of the class or component which originated the exception.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBException.Name">
            <summary>
Gets or sets the name of the component or class that originated the exception. 
</summary>
            <value>Name of the class or component which originated the exception.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBException.Source">
            <summary>
Gets or sets the message source of the message in the exception.
</summary>
            <value>Source of the exception.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBException.Method">
            <summary>
Gets or sets the name of the method which throws the exception.
</summary>
            <value>Method name.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBException.Line">
            <summary>
Gets or sets the line in the file where the exception was generated.
</summary>
            <value>Line number.</value>
        </member>
        <member name="P:IBM.Broker.Plugin.NBException.File">
            <summary>
Gets or sets the file that generated the exception.
</summary>
            <value>File name.</value>
        </member>
        <member name="T:IBM.Broker.Plugin.NBException">
            <summary>
                <c>NBException</c> represents the base class of the broker exception hierarchy from which all broker
exceptions are derived.
</summary>
            <remarks>
Like <c>System::Exception</c>'s, <c>NBException</c>'s should not normally be caught directly. Instead, the
<c>NBRecoverableException</c> subclass should be caught. However if <c>NBException</c>'s are 
caught by user code they must be rethrown to the broker for additional error recovery 
to be performed. 
<para>
An <c>NBException</c> object represents a single item within an exception list.
</para><para>
An exception list is a hierarchy of exceptions which grow as error conditions get passed back up through the message flow. 
Despite the name, an exception list is, in fact, a tree structure with each <c>NBException</c> able to have more than one child.
</para></remarks>
        </member>
        <member name="T:IBM.Broker.Plugin.NBSeverity">
            <summary>
NBSeverity enum represents the severity of an exception or log message.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBSeverity.Error">
            <summary>
An Error message.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBSeverity.Warning">
            <summary>
A Warning message.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBSeverity.Information">
            <summary>
An Informational message.
</summary>
        </member>
        <member name="F:IBM.Broker.Plugin.NBSeverity.Default">
            <summary>
Unused.
</summary>
        </member>
    </members>
</doc>